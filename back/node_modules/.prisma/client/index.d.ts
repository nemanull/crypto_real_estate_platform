
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Property
 * 
 */
export type Property = $Result.DefaultSelection<Prisma.$PropertyPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserFavoriteProperty
 * 
 */
export type UserFavoriteProperty = $Result.DefaultSelection<Prisma.$UserFavoritePropertyPayload>
/**
 * Model UserPortfolioProperty
 * 
 */
export type UserPortfolioProperty = $Result.DefaultSelection<Prisma.$UserPortfolioPropertyPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Properties
 * const properties = await prisma.property.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Properties
   * const properties = await prisma.property.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.property`: Exposes CRUD operations for the **Property** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Properties
    * const properties = await prisma.property.findMany()
    * ```
    */
  get property(): Prisma.PropertyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userFavoriteProperty`: Exposes CRUD operations for the **UserFavoriteProperty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFavoriteProperties
    * const userFavoriteProperties = await prisma.userFavoriteProperty.findMany()
    * ```
    */
  get userFavoriteProperty(): Prisma.UserFavoritePropertyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPortfolioProperty`: Exposes CRUD operations for the **UserPortfolioProperty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPortfolioProperties
    * const userPortfolioProperties = await prisma.userPortfolioProperty.findMany()
    * ```
    */
  get userPortfolioProperty(): Prisma.UserPortfolioPropertyDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Property: 'Property',
    User: 'User',
    UserFavoriteProperty: 'UserFavoriteProperty',
    UserPortfolioProperty: 'UserPortfolioProperty'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "property" | "user" | "userFavoriteProperty" | "userPortfolioProperty"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Property: {
        payload: Prisma.$PropertyPayload<ExtArgs>
        fields: Prisma.PropertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropertyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropertyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findFirst: {
            args: Prisma.PropertyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropertyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findMany: {
            args: Prisma.PropertyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>[]
          }
          create: {
            args: Prisma.PropertyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          createMany: {
            args: Prisma.PropertyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PropertyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>[]
          }
          delete: {
            args: Prisma.PropertyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          update: {
            args: Prisma.PropertyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          deleteMany: {
            args: Prisma.PropertyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PropertyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PropertyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>[]
          }
          upsert: {
            args: Prisma.PropertyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          aggregate: {
            args: Prisma.PropertyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProperty>
          }
          groupBy: {
            args: Prisma.PropertyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PropertyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PropertyCountArgs<ExtArgs>
            result: $Utils.Optional<PropertyCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserFavoriteProperty: {
        payload: Prisma.$UserFavoritePropertyPayload<ExtArgs>
        fields: Prisma.UserFavoritePropertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFavoritePropertyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFavoritePropertyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload>
          }
          findFirst: {
            args: Prisma.UserFavoritePropertyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFavoritePropertyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload>
          }
          findMany: {
            args: Prisma.UserFavoritePropertyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload>[]
          }
          create: {
            args: Prisma.UserFavoritePropertyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload>
          }
          createMany: {
            args: Prisma.UserFavoritePropertyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserFavoritePropertyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload>[]
          }
          delete: {
            args: Prisma.UserFavoritePropertyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload>
          }
          update: {
            args: Prisma.UserFavoritePropertyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload>
          }
          deleteMany: {
            args: Prisma.UserFavoritePropertyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserFavoritePropertyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserFavoritePropertyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload>[]
          }
          upsert: {
            args: Prisma.UserFavoritePropertyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFavoritePropertyPayload>
          }
          aggregate: {
            args: Prisma.UserFavoritePropertyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserFavoriteProperty>
          }
          groupBy: {
            args: Prisma.UserFavoritePropertyGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserFavoritePropertyGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserFavoritePropertyCountArgs<ExtArgs>
            result: $Utils.Optional<UserFavoritePropertyCountAggregateOutputType> | number
          }
        }
      }
      UserPortfolioProperty: {
        payload: Prisma.$UserPortfolioPropertyPayload<ExtArgs>
        fields: Prisma.UserPortfolioPropertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPortfolioPropertyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPortfolioPropertyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload>
          }
          findFirst: {
            args: Prisma.UserPortfolioPropertyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPortfolioPropertyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload>
          }
          findMany: {
            args: Prisma.UserPortfolioPropertyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload>[]
          }
          create: {
            args: Prisma.UserPortfolioPropertyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload>
          }
          createMany: {
            args: Prisma.UserPortfolioPropertyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPortfolioPropertyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload>[]
          }
          delete: {
            args: Prisma.UserPortfolioPropertyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload>
          }
          update: {
            args: Prisma.UserPortfolioPropertyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload>
          }
          deleteMany: {
            args: Prisma.UserPortfolioPropertyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPortfolioPropertyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserPortfolioPropertyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload>[]
          }
          upsert: {
            args: Prisma.UserPortfolioPropertyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPortfolioPropertyPayload>
          }
          aggregate: {
            args: Prisma.UserPortfolioPropertyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPortfolioProperty>
          }
          groupBy: {
            args: Prisma.UserPortfolioPropertyGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPortfolioPropertyGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPortfolioPropertyCountArgs<ExtArgs>
            result: $Utils.Optional<UserPortfolioPropertyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    property?: PropertyOmit
    user?: UserOmit
    userFavoriteProperty?: UserFavoritePropertyOmit
    userPortfolioProperty?: UserPortfolioPropertyOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PropertyCountOutputType
   */

  export type PropertyCountOutputType = {
    favorites: number
    portfolioEntries: number
  }

  export type PropertyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorites?: boolean | PropertyCountOutputTypeCountFavoritesArgs
    portfolioEntries?: boolean | PropertyCountOutputTypeCountPortfolioEntriesArgs
  }

  // Custom InputTypes
  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyCountOutputType
     */
    select?: PropertyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFavoritePropertyWhereInput
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountPortfolioEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPortfolioPropertyWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    favorites: number
    portfolioEntries: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorites?: boolean | UserCountOutputTypeCountFavoritesArgs
    portfolioEntries?: boolean | UserCountOutputTypeCountPortfolioEntriesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFavoritePropertyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPortfolioEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPortfolioPropertyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Property
   */

  export type AggregateProperty = {
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  export type PropertyAvgAggregateOutputType = {
    id: number | null
    onchainId: number | null
    totalTokens: number | null
    tokensLeft: number | null
    annualReturnBp: number | null
    priceUsdTotal: number | null
    priceUsdPerToken: number | null
    monthlyReturnUsd: number | null
    bedrooms: number | null
    bathrooms: number | null
    areaSqft: number | null
    areaSqm: number | null
    floorsTotal: number | null
  }

  export type PropertySumAggregateOutputType = {
    id: number | null
    onchainId: number | null
    totalTokens: number | null
    tokensLeft: number | null
    annualReturnBp: number | null
    priceUsdTotal: number | null
    priceUsdPerToken: number | null
    monthlyReturnUsd: number | null
    bedrooms: number | null
    bathrooms: number | null
    areaSqft: number | null
    areaSqm: number | null
    floorsTotal: number | null
  }

  export type PropertyMinAggregateOutputType = {
    id: number | null
    onchainId: number | null
    onchainAddress: string | null
    metadataHash: string | null
    imageUrl: string | null
    totalTokens: number | null
    tokensLeft: number | null
    pricePerTokenWei: string | null
    annualReturnBp: number | null
    priceUsdTotal: number | null
    priceUsdPerToken: number | null
    monthlyReturnUsd: number | null
    addressLine1: string | null
    city: string | null
    province: string | null
    postalCode: string | null
    propertyType: string | null
    description: string | null
    bedrooms: number | null
    bathrooms: number | null
    areaSqft: number | null
    areaSqm: number | null
    floor: string | null
    floorsTotal: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyMaxAggregateOutputType = {
    id: number | null
    onchainId: number | null
    onchainAddress: string | null
    metadataHash: string | null
    imageUrl: string | null
    totalTokens: number | null
    tokensLeft: number | null
    pricePerTokenWei: string | null
    annualReturnBp: number | null
    priceUsdTotal: number | null
    priceUsdPerToken: number | null
    monthlyReturnUsd: number | null
    addressLine1: string | null
    city: string | null
    province: string | null
    postalCode: string | null
    propertyType: string | null
    description: string | null
    bedrooms: number | null
    bathrooms: number | null
    areaSqft: number | null
    areaSqm: number | null
    floor: string | null
    floorsTotal: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyCountAggregateOutputType = {
    id: number
    onchainId: number
    onchainAddress: number
    metadataHash: number
    imageUrl: number
    totalTokens: number
    tokensLeft: number
    pricePerTokenWei: number
    annualReturnBp: number
    priceUsdTotal: number
    priceUsdPerToken: number
    monthlyReturnUsd: number
    addressLine1: number
    city: number
    province: number
    postalCode: number
    propertyType: number
    description: number
    bedrooms: number
    bathrooms: number
    areaSqft: number
    areaSqm: number
    floor: number
    floorsTotal: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PropertyAvgAggregateInputType = {
    id?: true
    onchainId?: true
    totalTokens?: true
    tokensLeft?: true
    annualReturnBp?: true
    priceUsdTotal?: true
    priceUsdPerToken?: true
    monthlyReturnUsd?: true
    bedrooms?: true
    bathrooms?: true
    areaSqft?: true
    areaSqm?: true
    floorsTotal?: true
  }

  export type PropertySumAggregateInputType = {
    id?: true
    onchainId?: true
    totalTokens?: true
    tokensLeft?: true
    annualReturnBp?: true
    priceUsdTotal?: true
    priceUsdPerToken?: true
    monthlyReturnUsd?: true
    bedrooms?: true
    bathrooms?: true
    areaSqft?: true
    areaSqm?: true
    floorsTotal?: true
  }

  export type PropertyMinAggregateInputType = {
    id?: true
    onchainId?: true
    onchainAddress?: true
    metadataHash?: true
    imageUrl?: true
    totalTokens?: true
    tokensLeft?: true
    pricePerTokenWei?: true
    annualReturnBp?: true
    priceUsdTotal?: true
    priceUsdPerToken?: true
    monthlyReturnUsd?: true
    addressLine1?: true
    city?: true
    province?: true
    postalCode?: true
    propertyType?: true
    description?: true
    bedrooms?: true
    bathrooms?: true
    areaSqft?: true
    areaSqm?: true
    floor?: true
    floorsTotal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyMaxAggregateInputType = {
    id?: true
    onchainId?: true
    onchainAddress?: true
    metadataHash?: true
    imageUrl?: true
    totalTokens?: true
    tokensLeft?: true
    pricePerTokenWei?: true
    annualReturnBp?: true
    priceUsdTotal?: true
    priceUsdPerToken?: true
    monthlyReturnUsd?: true
    addressLine1?: true
    city?: true
    province?: true
    postalCode?: true
    propertyType?: true
    description?: true
    bedrooms?: true
    bathrooms?: true
    areaSqft?: true
    areaSqm?: true
    floor?: true
    floorsTotal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyCountAggregateInputType = {
    id?: true
    onchainId?: true
    onchainAddress?: true
    metadataHash?: true
    imageUrl?: true
    totalTokens?: true
    tokensLeft?: true
    pricePerTokenWei?: true
    annualReturnBp?: true
    priceUsdTotal?: true
    priceUsdPerToken?: true
    monthlyReturnUsd?: true
    addressLine1?: true
    city?: true
    province?: true
    postalCode?: true
    propertyType?: true
    description?: true
    bedrooms?: true
    bathrooms?: true
    areaSqft?: true
    areaSqm?: true
    floor?: true
    floorsTotal?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Property to aggregate.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Properties
    **/
    _count?: true | PropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyMaxAggregateInputType
  }

  export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProperty[P]>
      : GetScalarType<T[P], AggregateProperty[P]>
  }




  export type PropertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithAggregationInput | PropertyOrderByWithAggregationInput[]
    by: PropertyScalarFieldEnum[] | PropertyScalarFieldEnum
    having?: PropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyCountAggregateInputType | true
    _avg?: PropertyAvgAggregateInputType
    _sum?: PropertySumAggregateInputType
    _min?: PropertyMinAggregateInputType
    _max?: PropertyMaxAggregateInputType
  }

  export type PropertyGroupByOutputType = {
    id: number
    onchainId: number
    onchainAddress: string | null
    metadataHash: string
    imageUrl: string
    totalTokens: number
    tokensLeft: number
    pricePerTokenWei: string
    annualReturnBp: number
    priceUsdTotal: number
    priceUsdPerToken: number
    monthlyReturnUsd: number
    addressLine1: string
    city: string
    province: string
    postalCode: string
    propertyType: string
    description: string
    bedrooms: number
    bathrooms: number
    areaSqft: number
    areaSqm: number
    floor: string
    floorsTotal: number
    createdAt: Date
    updatedAt: Date
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  type GetPropertyGroupByPayload<T extends PropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyGroupByOutputType[P]>
        }
      >
    >


  export type PropertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    onchainId?: boolean
    onchainAddress?: boolean
    metadataHash?: boolean
    imageUrl?: boolean
    totalTokens?: boolean
    tokensLeft?: boolean
    pricePerTokenWei?: boolean
    annualReturnBp?: boolean
    priceUsdTotal?: boolean
    priceUsdPerToken?: boolean
    monthlyReturnUsd?: boolean
    addressLine1?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    propertyType?: boolean
    description?: boolean
    bedrooms?: boolean
    bathrooms?: boolean
    areaSqft?: boolean
    areaSqm?: boolean
    floor?: boolean
    floorsTotal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    favorites?: boolean | Property$favoritesArgs<ExtArgs>
    portfolioEntries?: boolean | Property$portfolioEntriesArgs<ExtArgs>
    _count?: boolean | PropertyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["property"]>

  export type PropertySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    onchainId?: boolean
    onchainAddress?: boolean
    metadataHash?: boolean
    imageUrl?: boolean
    totalTokens?: boolean
    tokensLeft?: boolean
    pricePerTokenWei?: boolean
    annualReturnBp?: boolean
    priceUsdTotal?: boolean
    priceUsdPerToken?: boolean
    monthlyReturnUsd?: boolean
    addressLine1?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    propertyType?: boolean
    description?: boolean
    bedrooms?: boolean
    bathrooms?: boolean
    areaSqft?: boolean
    areaSqm?: boolean
    floor?: boolean
    floorsTotal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["property"]>

  export type PropertySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    onchainId?: boolean
    onchainAddress?: boolean
    metadataHash?: boolean
    imageUrl?: boolean
    totalTokens?: boolean
    tokensLeft?: boolean
    pricePerTokenWei?: boolean
    annualReturnBp?: boolean
    priceUsdTotal?: boolean
    priceUsdPerToken?: boolean
    monthlyReturnUsd?: boolean
    addressLine1?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    propertyType?: boolean
    description?: boolean
    bedrooms?: boolean
    bathrooms?: boolean
    areaSqft?: boolean
    areaSqm?: boolean
    floor?: boolean
    floorsTotal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["property"]>

  export type PropertySelectScalar = {
    id?: boolean
    onchainId?: boolean
    onchainAddress?: boolean
    metadataHash?: boolean
    imageUrl?: boolean
    totalTokens?: boolean
    tokensLeft?: boolean
    pricePerTokenWei?: boolean
    annualReturnBp?: boolean
    priceUsdTotal?: boolean
    priceUsdPerToken?: boolean
    monthlyReturnUsd?: boolean
    addressLine1?: boolean
    city?: boolean
    province?: boolean
    postalCode?: boolean
    propertyType?: boolean
    description?: boolean
    bedrooms?: boolean
    bathrooms?: boolean
    areaSqft?: boolean
    areaSqm?: boolean
    floor?: boolean
    floorsTotal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PropertyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "onchainId" | "onchainAddress" | "metadataHash" | "imageUrl" | "totalTokens" | "tokensLeft" | "pricePerTokenWei" | "annualReturnBp" | "priceUsdTotal" | "priceUsdPerToken" | "monthlyReturnUsd" | "addressLine1" | "city" | "province" | "postalCode" | "propertyType" | "description" | "bedrooms" | "bathrooms" | "areaSqft" | "areaSqm" | "floor" | "floorsTotal" | "createdAt" | "updatedAt", ExtArgs["result"]["property"]>
  export type PropertyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorites?: boolean | Property$favoritesArgs<ExtArgs>
    portfolioEntries?: boolean | Property$portfolioEntriesArgs<ExtArgs>
    _count?: boolean | PropertyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PropertyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PropertyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PropertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Property"
    objects: {
      favorites: Prisma.$UserFavoritePropertyPayload<ExtArgs>[]
      portfolioEntries: Prisma.$UserPortfolioPropertyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      onchainId: number
      onchainAddress: string | null
      metadataHash: string
      imageUrl: string
      totalTokens: number
      tokensLeft: number
      pricePerTokenWei: string
      annualReturnBp: number
      priceUsdTotal: number
      priceUsdPerToken: number
      monthlyReturnUsd: number
      addressLine1: string
      city: string
      province: string
      postalCode: string
      propertyType: string
      description: string
      bedrooms: number
      bathrooms: number
      areaSqft: number
      areaSqm: number
      floor: string
      floorsTotal: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["property"]>
    composites: {}
  }

  type PropertyGetPayload<S extends boolean | null | undefined | PropertyDefaultArgs> = $Result.GetResult<Prisma.$PropertyPayload, S>

  type PropertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PropertyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PropertyCountAggregateInputType | true
    }

  export interface PropertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Property'], meta: { name: 'Property' } }
    /**
     * Find zero or one Property that matches the filter.
     * @param {PropertyFindUniqueArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PropertyFindUniqueArgs>(args: SelectSubset<T, PropertyFindUniqueArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Property that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PropertyFindUniqueOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PropertyFindUniqueOrThrowArgs>(args: SelectSubset<T, PropertyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Property that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PropertyFindFirstArgs>(args?: SelectSubset<T, PropertyFindFirstArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Property that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PropertyFindFirstOrThrowArgs>(args?: SelectSubset<T, PropertyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Properties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Properties
     * const properties = await prisma.property.findMany()
     * 
     * // Get first 10 Properties
     * const properties = await prisma.property.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyWithIdOnly = await prisma.property.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PropertyFindManyArgs>(args?: SelectSubset<T, PropertyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Property.
     * @param {PropertyCreateArgs} args - Arguments to create a Property.
     * @example
     * // Create one Property
     * const Property = await prisma.property.create({
     *   data: {
     *     // ... data to create a Property
     *   }
     * })
     * 
     */
    create<T extends PropertyCreateArgs>(args: SelectSubset<T, PropertyCreateArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Properties.
     * @param {PropertyCreateManyArgs} args - Arguments to create many Properties.
     * @example
     * // Create many Properties
     * const property = await prisma.property.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PropertyCreateManyArgs>(args?: SelectSubset<T, PropertyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Properties and returns the data saved in the database.
     * @param {PropertyCreateManyAndReturnArgs} args - Arguments to create many Properties.
     * @example
     * // Create many Properties
     * const property = await prisma.property.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Properties and only return the `id`
     * const propertyWithIdOnly = await prisma.property.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PropertyCreateManyAndReturnArgs>(args?: SelectSubset<T, PropertyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Property.
     * @param {PropertyDeleteArgs} args - Arguments to delete one Property.
     * @example
     * // Delete one Property
     * const Property = await prisma.property.delete({
     *   where: {
     *     // ... filter to delete one Property
     *   }
     * })
     * 
     */
    delete<T extends PropertyDeleteArgs>(args: SelectSubset<T, PropertyDeleteArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Property.
     * @param {PropertyUpdateArgs} args - Arguments to update one Property.
     * @example
     * // Update one Property
     * const property = await prisma.property.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PropertyUpdateArgs>(args: SelectSubset<T, PropertyUpdateArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Properties.
     * @param {PropertyDeleteManyArgs} args - Arguments to filter Properties to delete.
     * @example
     * // Delete a few Properties
     * const { count } = await prisma.property.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PropertyDeleteManyArgs>(args?: SelectSubset<T, PropertyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PropertyUpdateManyArgs>(args: SelectSubset<T, PropertyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Properties and returns the data updated in the database.
     * @param {PropertyUpdateManyAndReturnArgs} args - Arguments to update many Properties.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Properties and only return the `id`
     * const propertyWithIdOnly = await prisma.property.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PropertyUpdateManyAndReturnArgs>(args: SelectSubset<T, PropertyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Property.
     * @param {PropertyUpsertArgs} args - Arguments to update or create a Property.
     * @example
     * // Update or create a Property
     * const property = await prisma.property.upsert({
     *   create: {
     *     // ... data to create a Property
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Property we want to update
     *   }
     * })
     */
    upsert<T extends PropertyUpsertArgs>(args: SelectSubset<T, PropertyUpsertArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyCountArgs} args - Arguments to filter Properties to count.
     * @example
     * // Count the number of Properties
     * const count = await prisma.property.count({
     *   where: {
     *     // ... the filter for the Properties we want to count
     *   }
     * })
    **/
    count<T extends PropertyCountArgs>(
      args?: Subset<T, PropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyAggregateArgs>(args: Subset<T, PropertyAggregateArgs>): Prisma.PrismaPromise<GetPropertyAggregateType<T>>

    /**
     * Group by Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyGroupByArgs['orderBy'] }
        : { orderBy?: PropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Property model
   */
  readonly fields: PropertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Property.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favorites<T extends Property$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, Property$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    portfolioEntries<T extends Property$portfolioEntriesArgs<ExtArgs> = {}>(args?: Subset<T, Property$portfolioEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Property model
   */
  interface PropertyFieldRefs {
    readonly id: FieldRef<"Property", 'Int'>
    readonly onchainId: FieldRef<"Property", 'Int'>
    readonly onchainAddress: FieldRef<"Property", 'String'>
    readonly metadataHash: FieldRef<"Property", 'String'>
    readonly imageUrl: FieldRef<"Property", 'String'>
    readonly totalTokens: FieldRef<"Property", 'Int'>
    readonly tokensLeft: FieldRef<"Property", 'Int'>
    readonly pricePerTokenWei: FieldRef<"Property", 'String'>
    readonly annualReturnBp: FieldRef<"Property", 'Int'>
    readonly priceUsdTotal: FieldRef<"Property", 'Float'>
    readonly priceUsdPerToken: FieldRef<"Property", 'Float'>
    readonly monthlyReturnUsd: FieldRef<"Property", 'Float'>
    readonly addressLine1: FieldRef<"Property", 'String'>
    readonly city: FieldRef<"Property", 'String'>
    readonly province: FieldRef<"Property", 'String'>
    readonly postalCode: FieldRef<"Property", 'String'>
    readonly propertyType: FieldRef<"Property", 'String'>
    readonly description: FieldRef<"Property", 'String'>
    readonly bedrooms: FieldRef<"Property", 'Int'>
    readonly bathrooms: FieldRef<"Property", 'Int'>
    readonly areaSqft: FieldRef<"Property", 'Float'>
    readonly areaSqm: FieldRef<"Property", 'Float'>
    readonly floor: FieldRef<"Property", 'String'>
    readonly floorsTotal: FieldRef<"Property", 'Int'>
    readonly createdAt: FieldRef<"Property", 'DateTime'>
    readonly updatedAt: FieldRef<"Property", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Property findUnique
   */
  export type PropertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findUniqueOrThrow
   */
  export type PropertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findFirst
   */
  export type PropertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findFirstOrThrow
   */
  export type PropertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findMany
   */
  export type PropertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Properties to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property create
   */
  export type PropertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to create a Property.
     */
    data: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
  }

  /**
   * Property createMany
   */
  export type PropertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Properties.
     */
    data: PropertyCreateManyInput | PropertyCreateManyInput[]
  }

  /**
   * Property createManyAndReturn
   */
  export type PropertyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * The data used to create many Properties.
     */
    data: PropertyCreateManyInput | PropertyCreateManyInput[]
  }

  /**
   * Property update
   */
  export type PropertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to update a Property.
     */
    data: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
    /**
     * Choose, which Property to update.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property updateMany
   */
  export type PropertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Properties.
     */
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyInput>
    /**
     * Filter which Properties to update
     */
    where?: PropertyWhereInput
    /**
     * Limit how many Properties to update.
     */
    limit?: number
  }

  /**
   * Property updateManyAndReturn
   */
  export type PropertyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * The data used to update Properties.
     */
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyInput>
    /**
     * Filter which Properties to update
     */
    where?: PropertyWhereInput
    /**
     * Limit how many Properties to update.
     */
    limit?: number
  }

  /**
   * Property upsert
   */
  export type PropertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The filter to search for the Property to update in case it exists.
     */
    where: PropertyWhereUniqueInput
    /**
     * In case the Property found by the `where` argument doesn't exist, create a new Property with this data.
     */
    create: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
    /**
     * In case the Property was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
  }

  /**
   * Property delete
   */
  export type PropertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter which Property to delete.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property deleteMany
   */
  export type PropertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Properties to delete
     */
    where?: PropertyWhereInput
    /**
     * Limit how many Properties to delete.
     */
    limit?: number
  }

  /**
   * Property.favorites
   */
  export type Property$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    where?: UserFavoritePropertyWhereInput
    orderBy?: UserFavoritePropertyOrderByWithRelationInput | UserFavoritePropertyOrderByWithRelationInput[]
    cursor?: UserFavoritePropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFavoritePropertyScalarFieldEnum | UserFavoritePropertyScalarFieldEnum[]
  }

  /**
   * Property.portfolioEntries
   */
  export type Property$portfolioEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    where?: UserPortfolioPropertyWhereInput
    orderBy?: UserPortfolioPropertyOrderByWithRelationInput | UserPortfolioPropertyOrderByWithRelationInput[]
    cursor?: UserPortfolioPropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPortfolioPropertyScalarFieldEnum | UserPortfolioPropertyScalarFieldEnum[]
  }

  /**
   * Property without action
   */
  export type PropertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Property
     */
    omit?: PropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    walletAddress: string | null
    emailAddress: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    walletAddress: string | null
    emailAddress: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    walletAddress: number
    emailAddress: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    walletAddress?: true
    emailAddress?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    emailAddress?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    walletAddress?: true
    emailAddress?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    walletAddress: string | null
    emailAddress: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    emailAddress?: boolean
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    portfolioEntries?: boolean | User$portfolioEntriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    emailAddress?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    emailAddress?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    emailAddress?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletAddress" | "emailAddress", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    portfolioEntries?: boolean | User$portfolioEntriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      favorites: Prisma.$UserFavoritePropertyPayload<ExtArgs>[]
      portfolioEntries: Prisma.$UserPortfolioPropertyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      walletAddress: string | null
      emailAddress: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favorites<T extends User$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    portfolioEntries<T extends User$portfolioEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$portfolioEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly walletAddress: FieldRef<"User", 'String'>
    readonly emailAddress: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.favorites
   */
  export type User$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    where?: UserFavoritePropertyWhereInput
    orderBy?: UserFavoritePropertyOrderByWithRelationInput | UserFavoritePropertyOrderByWithRelationInput[]
    cursor?: UserFavoritePropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFavoritePropertyScalarFieldEnum | UserFavoritePropertyScalarFieldEnum[]
  }

  /**
   * User.portfolioEntries
   */
  export type User$portfolioEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    where?: UserPortfolioPropertyWhereInput
    orderBy?: UserPortfolioPropertyOrderByWithRelationInput | UserPortfolioPropertyOrderByWithRelationInput[]
    cursor?: UserPortfolioPropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPortfolioPropertyScalarFieldEnum | UserPortfolioPropertyScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserFavoriteProperty
   */

  export type AggregateUserFavoriteProperty = {
    _count: UserFavoritePropertyCountAggregateOutputType | null
    _avg: UserFavoritePropertyAvgAggregateOutputType | null
    _sum: UserFavoritePropertySumAggregateOutputType | null
    _min: UserFavoritePropertyMinAggregateOutputType | null
    _max: UserFavoritePropertyMaxAggregateOutputType | null
  }

  export type UserFavoritePropertyAvgAggregateOutputType = {
    userId: number | null
    propertyId: number | null
  }

  export type UserFavoritePropertySumAggregateOutputType = {
    userId: number | null
    propertyId: number | null
  }

  export type UserFavoritePropertyMinAggregateOutputType = {
    userId: number | null
    propertyId: number | null
  }

  export type UserFavoritePropertyMaxAggregateOutputType = {
    userId: number | null
    propertyId: number | null
  }

  export type UserFavoritePropertyCountAggregateOutputType = {
    userId: number
    propertyId: number
    _all: number
  }


  export type UserFavoritePropertyAvgAggregateInputType = {
    userId?: true
    propertyId?: true
  }

  export type UserFavoritePropertySumAggregateInputType = {
    userId?: true
    propertyId?: true
  }

  export type UserFavoritePropertyMinAggregateInputType = {
    userId?: true
    propertyId?: true
  }

  export type UserFavoritePropertyMaxAggregateInputType = {
    userId?: true
    propertyId?: true
  }

  export type UserFavoritePropertyCountAggregateInputType = {
    userId?: true
    propertyId?: true
    _all?: true
  }

  export type UserFavoritePropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFavoriteProperty to aggregate.
     */
    where?: UserFavoritePropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavoriteProperties to fetch.
     */
    orderBy?: UserFavoritePropertyOrderByWithRelationInput | UserFavoritePropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserFavoritePropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavoriteProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavoriteProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFavoriteProperties
    **/
    _count?: true | UserFavoritePropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserFavoritePropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserFavoritePropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFavoritePropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFavoritePropertyMaxAggregateInputType
  }

  export type GetUserFavoritePropertyAggregateType<T extends UserFavoritePropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFavoriteProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFavoriteProperty[P]>
      : GetScalarType<T[P], AggregateUserFavoriteProperty[P]>
  }




  export type UserFavoritePropertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFavoritePropertyWhereInput
    orderBy?: UserFavoritePropertyOrderByWithAggregationInput | UserFavoritePropertyOrderByWithAggregationInput[]
    by: UserFavoritePropertyScalarFieldEnum[] | UserFavoritePropertyScalarFieldEnum
    having?: UserFavoritePropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFavoritePropertyCountAggregateInputType | true
    _avg?: UserFavoritePropertyAvgAggregateInputType
    _sum?: UserFavoritePropertySumAggregateInputType
    _min?: UserFavoritePropertyMinAggregateInputType
    _max?: UserFavoritePropertyMaxAggregateInputType
  }

  export type UserFavoritePropertyGroupByOutputType = {
    userId: number
    propertyId: number
    _count: UserFavoritePropertyCountAggregateOutputType | null
    _avg: UserFavoritePropertyAvgAggregateOutputType | null
    _sum: UserFavoritePropertySumAggregateOutputType | null
    _min: UserFavoritePropertyMinAggregateOutputType | null
    _max: UserFavoritePropertyMaxAggregateOutputType | null
  }

  type GetUserFavoritePropertyGroupByPayload<T extends UserFavoritePropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserFavoritePropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFavoritePropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFavoritePropertyGroupByOutputType[P]>
            : GetScalarType<T[P], UserFavoritePropertyGroupByOutputType[P]>
        }
      >
    >


  export type UserFavoritePropertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    propertyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFavoriteProperty"]>

  export type UserFavoritePropertySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    propertyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFavoriteProperty"]>

  export type UserFavoritePropertySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    propertyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFavoriteProperty"]>

  export type UserFavoritePropertySelectScalar = {
    userId?: boolean
    propertyId?: boolean
  }

  export type UserFavoritePropertyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "propertyId", ExtArgs["result"]["userFavoriteProperty"]>
  export type UserFavoritePropertyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }
  export type UserFavoritePropertyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }
  export type UserFavoritePropertyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }

  export type $UserFavoritePropertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserFavoriteProperty"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      property: Prisma.$PropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      propertyId: number
    }, ExtArgs["result"]["userFavoriteProperty"]>
    composites: {}
  }

  type UserFavoritePropertyGetPayload<S extends boolean | null | undefined | UserFavoritePropertyDefaultArgs> = $Result.GetResult<Prisma.$UserFavoritePropertyPayload, S>

  type UserFavoritePropertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFavoritePropertyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserFavoritePropertyCountAggregateInputType | true
    }

  export interface UserFavoritePropertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserFavoriteProperty'], meta: { name: 'UserFavoriteProperty' } }
    /**
     * Find zero or one UserFavoriteProperty that matches the filter.
     * @param {UserFavoritePropertyFindUniqueArgs} args - Arguments to find a UserFavoriteProperty
     * @example
     * // Get one UserFavoriteProperty
     * const userFavoriteProperty = await prisma.userFavoriteProperty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFavoritePropertyFindUniqueArgs>(args: SelectSubset<T, UserFavoritePropertyFindUniqueArgs<ExtArgs>>): Prisma__UserFavoritePropertyClient<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserFavoriteProperty that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFavoritePropertyFindUniqueOrThrowArgs} args - Arguments to find a UserFavoriteProperty
     * @example
     * // Get one UserFavoriteProperty
     * const userFavoriteProperty = await prisma.userFavoriteProperty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFavoritePropertyFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFavoritePropertyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserFavoritePropertyClient<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFavoriteProperty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritePropertyFindFirstArgs} args - Arguments to find a UserFavoriteProperty
     * @example
     * // Get one UserFavoriteProperty
     * const userFavoriteProperty = await prisma.userFavoriteProperty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFavoritePropertyFindFirstArgs>(args?: SelectSubset<T, UserFavoritePropertyFindFirstArgs<ExtArgs>>): Prisma__UserFavoritePropertyClient<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFavoriteProperty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritePropertyFindFirstOrThrowArgs} args - Arguments to find a UserFavoriteProperty
     * @example
     * // Get one UserFavoriteProperty
     * const userFavoriteProperty = await prisma.userFavoriteProperty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFavoritePropertyFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFavoritePropertyFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserFavoritePropertyClient<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserFavoriteProperties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritePropertyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFavoriteProperties
     * const userFavoriteProperties = await prisma.userFavoriteProperty.findMany()
     * 
     * // Get first 10 UserFavoriteProperties
     * const userFavoriteProperties = await prisma.userFavoriteProperty.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userFavoritePropertyWithUserIdOnly = await prisma.userFavoriteProperty.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFavoritePropertyFindManyArgs>(args?: SelectSubset<T, UserFavoritePropertyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserFavoriteProperty.
     * @param {UserFavoritePropertyCreateArgs} args - Arguments to create a UserFavoriteProperty.
     * @example
     * // Create one UserFavoriteProperty
     * const UserFavoriteProperty = await prisma.userFavoriteProperty.create({
     *   data: {
     *     // ... data to create a UserFavoriteProperty
     *   }
     * })
     * 
     */
    create<T extends UserFavoritePropertyCreateArgs>(args: SelectSubset<T, UserFavoritePropertyCreateArgs<ExtArgs>>): Prisma__UserFavoritePropertyClient<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserFavoriteProperties.
     * @param {UserFavoritePropertyCreateManyArgs} args - Arguments to create many UserFavoriteProperties.
     * @example
     * // Create many UserFavoriteProperties
     * const userFavoriteProperty = await prisma.userFavoriteProperty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserFavoritePropertyCreateManyArgs>(args?: SelectSubset<T, UserFavoritePropertyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserFavoriteProperties and returns the data saved in the database.
     * @param {UserFavoritePropertyCreateManyAndReturnArgs} args - Arguments to create many UserFavoriteProperties.
     * @example
     * // Create many UserFavoriteProperties
     * const userFavoriteProperty = await prisma.userFavoriteProperty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserFavoriteProperties and only return the `userId`
     * const userFavoritePropertyWithUserIdOnly = await prisma.userFavoriteProperty.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserFavoritePropertyCreateManyAndReturnArgs>(args?: SelectSubset<T, UserFavoritePropertyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserFavoriteProperty.
     * @param {UserFavoritePropertyDeleteArgs} args - Arguments to delete one UserFavoriteProperty.
     * @example
     * // Delete one UserFavoriteProperty
     * const UserFavoriteProperty = await prisma.userFavoriteProperty.delete({
     *   where: {
     *     // ... filter to delete one UserFavoriteProperty
     *   }
     * })
     * 
     */
    delete<T extends UserFavoritePropertyDeleteArgs>(args: SelectSubset<T, UserFavoritePropertyDeleteArgs<ExtArgs>>): Prisma__UserFavoritePropertyClient<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserFavoriteProperty.
     * @param {UserFavoritePropertyUpdateArgs} args - Arguments to update one UserFavoriteProperty.
     * @example
     * // Update one UserFavoriteProperty
     * const userFavoriteProperty = await prisma.userFavoriteProperty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserFavoritePropertyUpdateArgs>(args: SelectSubset<T, UserFavoritePropertyUpdateArgs<ExtArgs>>): Prisma__UserFavoritePropertyClient<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserFavoriteProperties.
     * @param {UserFavoritePropertyDeleteManyArgs} args - Arguments to filter UserFavoriteProperties to delete.
     * @example
     * // Delete a few UserFavoriteProperties
     * const { count } = await prisma.userFavoriteProperty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserFavoritePropertyDeleteManyArgs>(args?: SelectSubset<T, UserFavoritePropertyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFavoriteProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritePropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFavoriteProperties
     * const userFavoriteProperty = await prisma.userFavoriteProperty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserFavoritePropertyUpdateManyArgs>(args: SelectSubset<T, UserFavoritePropertyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFavoriteProperties and returns the data updated in the database.
     * @param {UserFavoritePropertyUpdateManyAndReturnArgs} args - Arguments to update many UserFavoriteProperties.
     * @example
     * // Update many UserFavoriteProperties
     * const userFavoriteProperty = await prisma.userFavoriteProperty.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserFavoriteProperties and only return the `userId`
     * const userFavoritePropertyWithUserIdOnly = await prisma.userFavoriteProperty.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserFavoritePropertyUpdateManyAndReturnArgs>(args: SelectSubset<T, UserFavoritePropertyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserFavoriteProperty.
     * @param {UserFavoritePropertyUpsertArgs} args - Arguments to update or create a UserFavoriteProperty.
     * @example
     * // Update or create a UserFavoriteProperty
     * const userFavoriteProperty = await prisma.userFavoriteProperty.upsert({
     *   create: {
     *     // ... data to create a UserFavoriteProperty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFavoriteProperty we want to update
     *   }
     * })
     */
    upsert<T extends UserFavoritePropertyUpsertArgs>(args: SelectSubset<T, UserFavoritePropertyUpsertArgs<ExtArgs>>): Prisma__UserFavoritePropertyClient<$Result.GetResult<Prisma.$UserFavoritePropertyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserFavoriteProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritePropertyCountArgs} args - Arguments to filter UserFavoriteProperties to count.
     * @example
     * // Count the number of UserFavoriteProperties
     * const count = await prisma.userFavoriteProperty.count({
     *   where: {
     *     // ... the filter for the UserFavoriteProperties we want to count
     *   }
     * })
    **/
    count<T extends UserFavoritePropertyCountArgs>(
      args?: Subset<T, UserFavoritePropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFavoritePropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFavoriteProperty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritePropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFavoritePropertyAggregateArgs>(args: Subset<T, UserFavoritePropertyAggregateArgs>): Prisma.PrismaPromise<GetUserFavoritePropertyAggregateType<T>>

    /**
     * Group by UserFavoriteProperty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritePropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFavoritePropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFavoritePropertyGroupByArgs['orderBy'] }
        : { orderBy?: UserFavoritePropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFavoritePropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFavoritePropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserFavoriteProperty model
   */
  readonly fields: UserFavoritePropertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFavoriteProperty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserFavoritePropertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserFavoriteProperty model
   */
  interface UserFavoritePropertyFieldRefs {
    readonly userId: FieldRef<"UserFavoriteProperty", 'Int'>
    readonly propertyId: FieldRef<"UserFavoriteProperty", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserFavoriteProperty findUnique
   */
  export type UserFavoritePropertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteProperty to fetch.
     */
    where: UserFavoritePropertyWhereUniqueInput
  }

  /**
   * UserFavoriteProperty findUniqueOrThrow
   */
  export type UserFavoritePropertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteProperty to fetch.
     */
    where: UserFavoritePropertyWhereUniqueInput
  }

  /**
   * UserFavoriteProperty findFirst
   */
  export type UserFavoritePropertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteProperty to fetch.
     */
    where?: UserFavoritePropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavoriteProperties to fetch.
     */
    orderBy?: UserFavoritePropertyOrderByWithRelationInput | UserFavoritePropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFavoriteProperties.
     */
    cursor?: UserFavoritePropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavoriteProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavoriteProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFavoriteProperties.
     */
    distinct?: UserFavoritePropertyScalarFieldEnum | UserFavoritePropertyScalarFieldEnum[]
  }

  /**
   * UserFavoriteProperty findFirstOrThrow
   */
  export type UserFavoritePropertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteProperty to fetch.
     */
    where?: UserFavoritePropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavoriteProperties to fetch.
     */
    orderBy?: UserFavoritePropertyOrderByWithRelationInput | UserFavoritePropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFavoriteProperties.
     */
    cursor?: UserFavoritePropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavoriteProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavoriteProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFavoriteProperties.
     */
    distinct?: UserFavoritePropertyScalarFieldEnum | UserFavoritePropertyScalarFieldEnum[]
  }

  /**
   * UserFavoriteProperty findMany
   */
  export type UserFavoritePropertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserFavoriteProperties to fetch.
     */
    where?: UserFavoritePropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavoriteProperties to fetch.
     */
    orderBy?: UserFavoritePropertyOrderByWithRelationInput | UserFavoritePropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFavoriteProperties.
     */
    cursor?: UserFavoritePropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavoriteProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavoriteProperties.
     */
    skip?: number
    distinct?: UserFavoritePropertyScalarFieldEnum | UserFavoritePropertyScalarFieldEnum[]
  }

  /**
   * UserFavoriteProperty create
   */
  export type UserFavoritePropertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    /**
     * The data needed to create a UserFavoriteProperty.
     */
    data: XOR<UserFavoritePropertyCreateInput, UserFavoritePropertyUncheckedCreateInput>
  }

  /**
   * UserFavoriteProperty createMany
   */
  export type UserFavoritePropertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserFavoriteProperties.
     */
    data: UserFavoritePropertyCreateManyInput | UserFavoritePropertyCreateManyInput[]
  }

  /**
   * UserFavoriteProperty createManyAndReturn
   */
  export type UserFavoritePropertyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * The data used to create many UserFavoriteProperties.
     */
    data: UserFavoritePropertyCreateManyInput | UserFavoritePropertyCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserFavoriteProperty update
   */
  export type UserFavoritePropertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    /**
     * The data needed to update a UserFavoriteProperty.
     */
    data: XOR<UserFavoritePropertyUpdateInput, UserFavoritePropertyUncheckedUpdateInput>
    /**
     * Choose, which UserFavoriteProperty to update.
     */
    where: UserFavoritePropertyWhereUniqueInput
  }

  /**
   * UserFavoriteProperty updateMany
   */
  export type UserFavoritePropertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserFavoriteProperties.
     */
    data: XOR<UserFavoritePropertyUpdateManyMutationInput, UserFavoritePropertyUncheckedUpdateManyInput>
    /**
     * Filter which UserFavoriteProperties to update
     */
    where?: UserFavoritePropertyWhereInput
    /**
     * Limit how many UserFavoriteProperties to update.
     */
    limit?: number
  }

  /**
   * UserFavoriteProperty updateManyAndReturn
   */
  export type UserFavoritePropertyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * The data used to update UserFavoriteProperties.
     */
    data: XOR<UserFavoritePropertyUpdateManyMutationInput, UserFavoritePropertyUncheckedUpdateManyInput>
    /**
     * Filter which UserFavoriteProperties to update
     */
    where?: UserFavoritePropertyWhereInput
    /**
     * Limit how many UserFavoriteProperties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserFavoriteProperty upsert
   */
  export type UserFavoritePropertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    /**
     * The filter to search for the UserFavoriteProperty to update in case it exists.
     */
    where: UserFavoritePropertyWhereUniqueInput
    /**
     * In case the UserFavoriteProperty found by the `where` argument doesn't exist, create a new UserFavoriteProperty with this data.
     */
    create: XOR<UserFavoritePropertyCreateInput, UserFavoritePropertyUncheckedCreateInput>
    /**
     * In case the UserFavoriteProperty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserFavoritePropertyUpdateInput, UserFavoritePropertyUncheckedUpdateInput>
  }

  /**
   * UserFavoriteProperty delete
   */
  export type UserFavoritePropertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
    /**
     * Filter which UserFavoriteProperty to delete.
     */
    where: UserFavoritePropertyWhereUniqueInput
  }

  /**
   * UserFavoriteProperty deleteMany
   */
  export type UserFavoritePropertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFavoriteProperties to delete
     */
    where?: UserFavoritePropertyWhereInput
    /**
     * Limit how many UserFavoriteProperties to delete.
     */
    limit?: number
  }

  /**
   * UserFavoriteProperty without action
   */
  export type UserFavoritePropertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFavoriteProperty
     */
    select?: UserFavoritePropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFavoriteProperty
     */
    omit?: UserFavoritePropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFavoritePropertyInclude<ExtArgs> | null
  }


  /**
   * Model UserPortfolioProperty
   */

  export type AggregateUserPortfolioProperty = {
    _count: UserPortfolioPropertyCountAggregateOutputType | null
    _avg: UserPortfolioPropertyAvgAggregateOutputType | null
    _sum: UserPortfolioPropertySumAggregateOutputType | null
    _min: UserPortfolioPropertyMinAggregateOutputType | null
    _max: UserPortfolioPropertyMaxAggregateOutputType | null
  }

  export type UserPortfolioPropertyAvgAggregateOutputType = {
    userId: number | null
    propertyId: number | null
  }

  export type UserPortfolioPropertySumAggregateOutputType = {
    userId: number | null
    propertyId: number | null
  }

  export type UserPortfolioPropertyMinAggregateOutputType = {
    userId: number | null
    propertyId: number | null
  }

  export type UserPortfolioPropertyMaxAggregateOutputType = {
    userId: number | null
    propertyId: number | null
  }

  export type UserPortfolioPropertyCountAggregateOutputType = {
    userId: number
    propertyId: number
    _all: number
  }


  export type UserPortfolioPropertyAvgAggregateInputType = {
    userId?: true
    propertyId?: true
  }

  export type UserPortfolioPropertySumAggregateInputType = {
    userId?: true
    propertyId?: true
  }

  export type UserPortfolioPropertyMinAggregateInputType = {
    userId?: true
    propertyId?: true
  }

  export type UserPortfolioPropertyMaxAggregateInputType = {
    userId?: true
    propertyId?: true
  }

  export type UserPortfolioPropertyCountAggregateInputType = {
    userId?: true
    propertyId?: true
    _all?: true
  }

  export type UserPortfolioPropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPortfolioProperty to aggregate.
     */
    where?: UserPortfolioPropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPortfolioProperties to fetch.
     */
    orderBy?: UserPortfolioPropertyOrderByWithRelationInput | UserPortfolioPropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPortfolioPropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPortfolioProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPortfolioProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPortfolioProperties
    **/
    _count?: true | UserPortfolioPropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPortfolioPropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPortfolioPropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPortfolioPropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPortfolioPropertyMaxAggregateInputType
  }

  export type GetUserPortfolioPropertyAggregateType<T extends UserPortfolioPropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPortfolioProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPortfolioProperty[P]>
      : GetScalarType<T[P], AggregateUserPortfolioProperty[P]>
  }




  export type UserPortfolioPropertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPortfolioPropertyWhereInput
    orderBy?: UserPortfolioPropertyOrderByWithAggregationInput | UserPortfolioPropertyOrderByWithAggregationInput[]
    by: UserPortfolioPropertyScalarFieldEnum[] | UserPortfolioPropertyScalarFieldEnum
    having?: UserPortfolioPropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPortfolioPropertyCountAggregateInputType | true
    _avg?: UserPortfolioPropertyAvgAggregateInputType
    _sum?: UserPortfolioPropertySumAggregateInputType
    _min?: UserPortfolioPropertyMinAggregateInputType
    _max?: UserPortfolioPropertyMaxAggregateInputType
  }

  export type UserPortfolioPropertyGroupByOutputType = {
    userId: number
    propertyId: number
    _count: UserPortfolioPropertyCountAggregateOutputType | null
    _avg: UserPortfolioPropertyAvgAggregateOutputType | null
    _sum: UserPortfolioPropertySumAggregateOutputType | null
    _min: UserPortfolioPropertyMinAggregateOutputType | null
    _max: UserPortfolioPropertyMaxAggregateOutputType | null
  }

  type GetUserPortfolioPropertyGroupByPayload<T extends UserPortfolioPropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPortfolioPropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPortfolioPropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPortfolioPropertyGroupByOutputType[P]>
            : GetScalarType<T[P], UserPortfolioPropertyGroupByOutputType[P]>
        }
      >
    >


  export type UserPortfolioPropertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    propertyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPortfolioProperty"]>

  export type UserPortfolioPropertySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    propertyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPortfolioProperty"]>

  export type UserPortfolioPropertySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    propertyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPortfolioProperty"]>

  export type UserPortfolioPropertySelectScalar = {
    userId?: boolean
    propertyId?: boolean
  }

  export type UserPortfolioPropertyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "propertyId", ExtArgs["result"]["userPortfolioProperty"]>
  export type UserPortfolioPropertyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }
  export type UserPortfolioPropertyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }
  export type UserPortfolioPropertyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }

  export type $UserPortfolioPropertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPortfolioProperty"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      property: Prisma.$PropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      propertyId: number
    }, ExtArgs["result"]["userPortfolioProperty"]>
    composites: {}
  }

  type UserPortfolioPropertyGetPayload<S extends boolean | null | undefined | UserPortfolioPropertyDefaultArgs> = $Result.GetResult<Prisma.$UserPortfolioPropertyPayload, S>

  type UserPortfolioPropertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPortfolioPropertyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPortfolioPropertyCountAggregateInputType | true
    }

  export interface UserPortfolioPropertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPortfolioProperty'], meta: { name: 'UserPortfolioProperty' } }
    /**
     * Find zero or one UserPortfolioProperty that matches the filter.
     * @param {UserPortfolioPropertyFindUniqueArgs} args - Arguments to find a UserPortfolioProperty
     * @example
     * // Get one UserPortfolioProperty
     * const userPortfolioProperty = await prisma.userPortfolioProperty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPortfolioPropertyFindUniqueArgs>(args: SelectSubset<T, UserPortfolioPropertyFindUniqueArgs<ExtArgs>>): Prisma__UserPortfolioPropertyClient<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPortfolioProperty that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPortfolioPropertyFindUniqueOrThrowArgs} args - Arguments to find a UserPortfolioProperty
     * @example
     * // Get one UserPortfolioProperty
     * const userPortfolioProperty = await prisma.userPortfolioProperty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPortfolioPropertyFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPortfolioPropertyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPortfolioPropertyClient<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPortfolioProperty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPortfolioPropertyFindFirstArgs} args - Arguments to find a UserPortfolioProperty
     * @example
     * // Get one UserPortfolioProperty
     * const userPortfolioProperty = await prisma.userPortfolioProperty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPortfolioPropertyFindFirstArgs>(args?: SelectSubset<T, UserPortfolioPropertyFindFirstArgs<ExtArgs>>): Prisma__UserPortfolioPropertyClient<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPortfolioProperty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPortfolioPropertyFindFirstOrThrowArgs} args - Arguments to find a UserPortfolioProperty
     * @example
     * // Get one UserPortfolioProperty
     * const userPortfolioProperty = await prisma.userPortfolioProperty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPortfolioPropertyFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPortfolioPropertyFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPortfolioPropertyClient<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPortfolioProperties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPortfolioPropertyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPortfolioProperties
     * const userPortfolioProperties = await prisma.userPortfolioProperty.findMany()
     * 
     * // Get first 10 UserPortfolioProperties
     * const userPortfolioProperties = await prisma.userPortfolioProperty.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userPortfolioPropertyWithUserIdOnly = await prisma.userPortfolioProperty.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserPortfolioPropertyFindManyArgs>(args?: SelectSubset<T, UserPortfolioPropertyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPortfolioProperty.
     * @param {UserPortfolioPropertyCreateArgs} args - Arguments to create a UserPortfolioProperty.
     * @example
     * // Create one UserPortfolioProperty
     * const UserPortfolioProperty = await prisma.userPortfolioProperty.create({
     *   data: {
     *     // ... data to create a UserPortfolioProperty
     *   }
     * })
     * 
     */
    create<T extends UserPortfolioPropertyCreateArgs>(args: SelectSubset<T, UserPortfolioPropertyCreateArgs<ExtArgs>>): Prisma__UserPortfolioPropertyClient<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPortfolioProperties.
     * @param {UserPortfolioPropertyCreateManyArgs} args - Arguments to create many UserPortfolioProperties.
     * @example
     * // Create many UserPortfolioProperties
     * const userPortfolioProperty = await prisma.userPortfolioProperty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPortfolioPropertyCreateManyArgs>(args?: SelectSubset<T, UserPortfolioPropertyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPortfolioProperties and returns the data saved in the database.
     * @param {UserPortfolioPropertyCreateManyAndReturnArgs} args - Arguments to create many UserPortfolioProperties.
     * @example
     * // Create many UserPortfolioProperties
     * const userPortfolioProperty = await prisma.userPortfolioProperty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPortfolioProperties and only return the `userId`
     * const userPortfolioPropertyWithUserIdOnly = await prisma.userPortfolioProperty.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPortfolioPropertyCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPortfolioPropertyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserPortfolioProperty.
     * @param {UserPortfolioPropertyDeleteArgs} args - Arguments to delete one UserPortfolioProperty.
     * @example
     * // Delete one UserPortfolioProperty
     * const UserPortfolioProperty = await prisma.userPortfolioProperty.delete({
     *   where: {
     *     // ... filter to delete one UserPortfolioProperty
     *   }
     * })
     * 
     */
    delete<T extends UserPortfolioPropertyDeleteArgs>(args: SelectSubset<T, UserPortfolioPropertyDeleteArgs<ExtArgs>>): Prisma__UserPortfolioPropertyClient<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPortfolioProperty.
     * @param {UserPortfolioPropertyUpdateArgs} args - Arguments to update one UserPortfolioProperty.
     * @example
     * // Update one UserPortfolioProperty
     * const userPortfolioProperty = await prisma.userPortfolioProperty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPortfolioPropertyUpdateArgs>(args: SelectSubset<T, UserPortfolioPropertyUpdateArgs<ExtArgs>>): Prisma__UserPortfolioPropertyClient<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPortfolioProperties.
     * @param {UserPortfolioPropertyDeleteManyArgs} args - Arguments to filter UserPortfolioProperties to delete.
     * @example
     * // Delete a few UserPortfolioProperties
     * const { count } = await prisma.userPortfolioProperty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPortfolioPropertyDeleteManyArgs>(args?: SelectSubset<T, UserPortfolioPropertyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPortfolioProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPortfolioPropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPortfolioProperties
     * const userPortfolioProperty = await prisma.userPortfolioProperty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPortfolioPropertyUpdateManyArgs>(args: SelectSubset<T, UserPortfolioPropertyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPortfolioProperties and returns the data updated in the database.
     * @param {UserPortfolioPropertyUpdateManyAndReturnArgs} args - Arguments to update many UserPortfolioProperties.
     * @example
     * // Update many UserPortfolioProperties
     * const userPortfolioProperty = await prisma.userPortfolioProperty.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserPortfolioProperties and only return the `userId`
     * const userPortfolioPropertyWithUserIdOnly = await prisma.userPortfolioProperty.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserPortfolioPropertyUpdateManyAndReturnArgs>(args: SelectSubset<T, UserPortfolioPropertyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserPortfolioProperty.
     * @param {UserPortfolioPropertyUpsertArgs} args - Arguments to update or create a UserPortfolioProperty.
     * @example
     * // Update or create a UserPortfolioProperty
     * const userPortfolioProperty = await prisma.userPortfolioProperty.upsert({
     *   create: {
     *     // ... data to create a UserPortfolioProperty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPortfolioProperty we want to update
     *   }
     * })
     */
    upsert<T extends UserPortfolioPropertyUpsertArgs>(args: SelectSubset<T, UserPortfolioPropertyUpsertArgs<ExtArgs>>): Prisma__UserPortfolioPropertyClient<$Result.GetResult<Prisma.$UserPortfolioPropertyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPortfolioProperties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPortfolioPropertyCountArgs} args - Arguments to filter UserPortfolioProperties to count.
     * @example
     * // Count the number of UserPortfolioProperties
     * const count = await prisma.userPortfolioProperty.count({
     *   where: {
     *     // ... the filter for the UserPortfolioProperties we want to count
     *   }
     * })
    **/
    count<T extends UserPortfolioPropertyCountArgs>(
      args?: Subset<T, UserPortfolioPropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPortfolioPropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPortfolioProperty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPortfolioPropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPortfolioPropertyAggregateArgs>(args: Subset<T, UserPortfolioPropertyAggregateArgs>): Prisma.PrismaPromise<GetUserPortfolioPropertyAggregateType<T>>

    /**
     * Group by UserPortfolioProperty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPortfolioPropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPortfolioPropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPortfolioPropertyGroupByArgs['orderBy'] }
        : { orderBy?: UserPortfolioPropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPortfolioPropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPortfolioPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPortfolioProperty model
   */
  readonly fields: UserPortfolioPropertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPortfolioProperty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPortfolioPropertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPortfolioProperty model
   */
  interface UserPortfolioPropertyFieldRefs {
    readonly userId: FieldRef<"UserPortfolioProperty", 'Int'>
    readonly propertyId: FieldRef<"UserPortfolioProperty", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserPortfolioProperty findUnique
   */
  export type UserPortfolioPropertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserPortfolioProperty to fetch.
     */
    where: UserPortfolioPropertyWhereUniqueInput
  }

  /**
   * UserPortfolioProperty findUniqueOrThrow
   */
  export type UserPortfolioPropertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserPortfolioProperty to fetch.
     */
    where: UserPortfolioPropertyWhereUniqueInput
  }

  /**
   * UserPortfolioProperty findFirst
   */
  export type UserPortfolioPropertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserPortfolioProperty to fetch.
     */
    where?: UserPortfolioPropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPortfolioProperties to fetch.
     */
    orderBy?: UserPortfolioPropertyOrderByWithRelationInput | UserPortfolioPropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPortfolioProperties.
     */
    cursor?: UserPortfolioPropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPortfolioProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPortfolioProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPortfolioProperties.
     */
    distinct?: UserPortfolioPropertyScalarFieldEnum | UserPortfolioPropertyScalarFieldEnum[]
  }

  /**
   * UserPortfolioProperty findFirstOrThrow
   */
  export type UserPortfolioPropertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserPortfolioProperty to fetch.
     */
    where?: UserPortfolioPropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPortfolioProperties to fetch.
     */
    orderBy?: UserPortfolioPropertyOrderByWithRelationInput | UserPortfolioPropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPortfolioProperties.
     */
    cursor?: UserPortfolioPropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPortfolioProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPortfolioProperties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPortfolioProperties.
     */
    distinct?: UserPortfolioPropertyScalarFieldEnum | UserPortfolioPropertyScalarFieldEnum[]
  }

  /**
   * UserPortfolioProperty findMany
   */
  export type UserPortfolioPropertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    /**
     * Filter, which UserPortfolioProperties to fetch.
     */
    where?: UserPortfolioPropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPortfolioProperties to fetch.
     */
    orderBy?: UserPortfolioPropertyOrderByWithRelationInput | UserPortfolioPropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPortfolioProperties.
     */
    cursor?: UserPortfolioPropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPortfolioProperties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPortfolioProperties.
     */
    skip?: number
    distinct?: UserPortfolioPropertyScalarFieldEnum | UserPortfolioPropertyScalarFieldEnum[]
  }

  /**
   * UserPortfolioProperty create
   */
  export type UserPortfolioPropertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPortfolioProperty.
     */
    data: XOR<UserPortfolioPropertyCreateInput, UserPortfolioPropertyUncheckedCreateInput>
  }

  /**
   * UserPortfolioProperty createMany
   */
  export type UserPortfolioPropertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPortfolioProperties.
     */
    data: UserPortfolioPropertyCreateManyInput | UserPortfolioPropertyCreateManyInput[]
  }

  /**
   * UserPortfolioProperty createManyAndReturn
   */
  export type UserPortfolioPropertyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * The data used to create many UserPortfolioProperties.
     */
    data: UserPortfolioPropertyCreateManyInput | UserPortfolioPropertyCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPortfolioProperty update
   */
  export type UserPortfolioPropertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPortfolioProperty.
     */
    data: XOR<UserPortfolioPropertyUpdateInput, UserPortfolioPropertyUncheckedUpdateInput>
    /**
     * Choose, which UserPortfolioProperty to update.
     */
    where: UserPortfolioPropertyWhereUniqueInput
  }

  /**
   * UserPortfolioProperty updateMany
   */
  export type UserPortfolioPropertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPortfolioProperties.
     */
    data: XOR<UserPortfolioPropertyUpdateManyMutationInput, UserPortfolioPropertyUncheckedUpdateManyInput>
    /**
     * Filter which UserPortfolioProperties to update
     */
    where?: UserPortfolioPropertyWhereInput
    /**
     * Limit how many UserPortfolioProperties to update.
     */
    limit?: number
  }

  /**
   * UserPortfolioProperty updateManyAndReturn
   */
  export type UserPortfolioPropertyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * The data used to update UserPortfolioProperties.
     */
    data: XOR<UserPortfolioPropertyUpdateManyMutationInput, UserPortfolioPropertyUncheckedUpdateManyInput>
    /**
     * Filter which UserPortfolioProperties to update
     */
    where?: UserPortfolioPropertyWhereInput
    /**
     * Limit how many UserPortfolioProperties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPortfolioProperty upsert
   */
  export type UserPortfolioPropertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPortfolioProperty to update in case it exists.
     */
    where: UserPortfolioPropertyWhereUniqueInput
    /**
     * In case the UserPortfolioProperty found by the `where` argument doesn't exist, create a new UserPortfolioProperty with this data.
     */
    create: XOR<UserPortfolioPropertyCreateInput, UserPortfolioPropertyUncheckedCreateInput>
    /**
     * In case the UserPortfolioProperty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPortfolioPropertyUpdateInput, UserPortfolioPropertyUncheckedUpdateInput>
  }

  /**
   * UserPortfolioProperty delete
   */
  export type UserPortfolioPropertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
    /**
     * Filter which UserPortfolioProperty to delete.
     */
    where: UserPortfolioPropertyWhereUniqueInput
  }

  /**
   * UserPortfolioProperty deleteMany
   */
  export type UserPortfolioPropertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPortfolioProperties to delete
     */
    where?: UserPortfolioPropertyWhereInput
    /**
     * Limit how many UserPortfolioProperties to delete.
     */
    limit?: number
  }

  /**
   * UserPortfolioProperty without action
   */
  export type UserPortfolioPropertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPortfolioProperty
     */
    select?: UserPortfolioPropertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPortfolioProperty
     */
    omit?: UserPortfolioPropertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPortfolioPropertyInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PropertyScalarFieldEnum: {
    id: 'id',
    onchainId: 'onchainId',
    onchainAddress: 'onchainAddress',
    metadataHash: 'metadataHash',
    imageUrl: 'imageUrl',
    totalTokens: 'totalTokens',
    tokensLeft: 'tokensLeft',
    pricePerTokenWei: 'pricePerTokenWei',
    annualReturnBp: 'annualReturnBp',
    priceUsdTotal: 'priceUsdTotal',
    priceUsdPerToken: 'priceUsdPerToken',
    monthlyReturnUsd: 'monthlyReturnUsd',
    addressLine1: 'addressLine1',
    city: 'city',
    province: 'province',
    postalCode: 'postalCode',
    propertyType: 'propertyType',
    description: 'description',
    bedrooms: 'bedrooms',
    bathrooms: 'bathrooms',
    areaSqft: 'areaSqft',
    areaSqm: 'areaSqm',
    floor: 'floor',
    floorsTotal: 'floorsTotal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PropertyScalarFieldEnum = (typeof PropertyScalarFieldEnum)[keyof typeof PropertyScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    emailAddress: 'emailAddress'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserFavoritePropertyScalarFieldEnum: {
    userId: 'userId',
    propertyId: 'propertyId'
  };

  export type UserFavoritePropertyScalarFieldEnum = (typeof UserFavoritePropertyScalarFieldEnum)[keyof typeof UserFavoritePropertyScalarFieldEnum]


  export const UserPortfolioPropertyScalarFieldEnum: {
    userId: 'userId',
    propertyId: 'propertyId'
  };

  export type UserPortfolioPropertyScalarFieldEnum = (typeof UserPortfolioPropertyScalarFieldEnum)[keyof typeof UserPortfolioPropertyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type PropertyWhereInput = {
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    id?: IntFilter<"Property"> | number
    onchainId?: IntFilter<"Property"> | number
    onchainAddress?: StringNullableFilter<"Property"> | string | null
    metadataHash?: StringFilter<"Property"> | string
    imageUrl?: StringFilter<"Property"> | string
    totalTokens?: IntFilter<"Property"> | number
    tokensLeft?: IntFilter<"Property"> | number
    pricePerTokenWei?: StringFilter<"Property"> | string
    annualReturnBp?: IntFilter<"Property"> | number
    priceUsdTotal?: FloatFilter<"Property"> | number
    priceUsdPerToken?: FloatFilter<"Property"> | number
    monthlyReturnUsd?: FloatFilter<"Property"> | number
    addressLine1?: StringFilter<"Property"> | string
    city?: StringFilter<"Property"> | string
    province?: StringFilter<"Property"> | string
    postalCode?: StringFilter<"Property"> | string
    propertyType?: StringFilter<"Property"> | string
    description?: StringFilter<"Property"> | string
    bedrooms?: IntFilter<"Property"> | number
    bathrooms?: IntFilter<"Property"> | number
    areaSqft?: FloatFilter<"Property"> | number
    areaSqm?: FloatFilter<"Property"> | number
    floor?: StringFilter<"Property"> | string
    floorsTotal?: IntFilter<"Property"> | number
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updatedAt?: DateTimeFilter<"Property"> | Date | string
    favorites?: UserFavoritePropertyListRelationFilter
    portfolioEntries?: UserPortfolioPropertyListRelationFilter
  }

  export type PropertyOrderByWithRelationInput = {
    id?: SortOrder
    onchainId?: SortOrder
    onchainAddress?: SortOrderInput | SortOrder
    metadataHash?: SortOrder
    imageUrl?: SortOrder
    totalTokens?: SortOrder
    tokensLeft?: SortOrder
    pricePerTokenWei?: SortOrder
    annualReturnBp?: SortOrder
    priceUsdTotal?: SortOrder
    priceUsdPerToken?: SortOrder
    monthlyReturnUsd?: SortOrder
    addressLine1?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    propertyType?: SortOrder
    description?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    areaSqft?: SortOrder
    areaSqm?: SortOrder
    floor?: SortOrder
    floorsTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    favorites?: UserFavoritePropertyOrderByRelationAggregateInput
    portfolioEntries?: UserPortfolioPropertyOrderByRelationAggregateInput
  }

  export type PropertyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    onchainId?: number
    onchainAddress?: string
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    metadataHash?: StringFilter<"Property"> | string
    imageUrl?: StringFilter<"Property"> | string
    totalTokens?: IntFilter<"Property"> | number
    tokensLeft?: IntFilter<"Property"> | number
    pricePerTokenWei?: StringFilter<"Property"> | string
    annualReturnBp?: IntFilter<"Property"> | number
    priceUsdTotal?: FloatFilter<"Property"> | number
    priceUsdPerToken?: FloatFilter<"Property"> | number
    monthlyReturnUsd?: FloatFilter<"Property"> | number
    addressLine1?: StringFilter<"Property"> | string
    city?: StringFilter<"Property"> | string
    province?: StringFilter<"Property"> | string
    postalCode?: StringFilter<"Property"> | string
    propertyType?: StringFilter<"Property"> | string
    description?: StringFilter<"Property"> | string
    bedrooms?: IntFilter<"Property"> | number
    bathrooms?: IntFilter<"Property"> | number
    areaSqft?: FloatFilter<"Property"> | number
    areaSqm?: FloatFilter<"Property"> | number
    floor?: StringFilter<"Property"> | string
    floorsTotal?: IntFilter<"Property"> | number
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updatedAt?: DateTimeFilter<"Property"> | Date | string
    favorites?: UserFavoritePropertyListRelationFilter
    portfolioEntries?: UserPortfolioPropertyListRelationFilter
  }, "id" | "onchainId" | "onchainAddress">

  export type PropertyOrderByWithAggregationInput = {
    id?: SortOrder
    onchainId?: SortOrder
    onchainAddress?: SortOrderInput | SortOrder
    metadataHash?: SortOrder
    imageUrl?: SortOrder
    totalTokens?: SortOrder
    tokensLeft?: SortOrder
    pricePerTokenWei?: SortOrder
    annualReturnBp?: SortOrder
    priceUsdTotal?: SortOrder
    priceUsdPerToken?: SortOrder
    monthlyReturnUsd?: SortOrder
    addressLine1?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    propertyType?: SortOrder
    description?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    areaSqft?: SortOrder
    areaSqm?: SortOrder
    floor?: SortOrder
    floorsTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PropertyCountOrderByAggregateInput
    _avg?: PropertyAvgOrderByAggregateInput
    _max?: PropertyMaxOrderByAggregateInput
    _min?: PropertyMinOrderByAggregateInput
    _sum?: PropertySumOrderByAggregateInput
  }

  export type PropertyScalarWhereWithAggregatesInput = {
    AND?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    OR?: PropertyScalarWhereWithAggregatesInput[]
    NOT?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Property"> | number
    onchainId?: IntWithAggregatesFilter<"Property"> | number
    onchainAddress?: StringNullableWithAggregatesFilter<"Property"> | string | null
    metadataHash?: StringWithAggregatesFilter<"Property"> | string
    imageUrl?: StringWithAggregatesFilter<"Property"> | string
    totalTokens?: IntWithAggregatesFilter<"Property"> | number
    tokensLeft?: IntWithAggregatesFilter<"Property"> | number
    pricePerTokenWei?: StringWithAggregatesFilter<"Property"> | string
    annualReturnBp?: IntWithAggregatesFilter<"Property"> | number
    priceUsdTotal?: FloatWithAggregatesFilter<"Property"> | number
    priceUsdPerToken?: FloatWithAggregatesFilter<"Property"> | number
    monthlyReturnUsd?: FloatWithAggregatesFilter<"Property"> | number
    addressLine1?: StringWithAggregatesFilter<"Property"> | string
    city?: StringWithAggregatesFilter<"Property"> | string
    province?: StringWithAggregatesFilter<"Property"> | string
    postalCode?: StringWithAggregatesFilter<"Property"> | string
    propertyType?: StringWithAggregatesFilter<"Property"> | string
    description?: StringWithAggregatesFilter<"Property"> | string
    bedrooms?: IntWithAggregatesFilter<"Property"> | number
    bathrooms?: IntWithAggregatesFilter<"Property"> | number
    areaSqft?: FloatWithAggregatesFilter<"Property"> | number
    areaSqm?: FloatWithAggregatesFilter<"Property"> | number
    floor?: StringWithAggregatesFilter<"Property"> | string
    floorsTotal?: IntWithAggregatesFilter<"Property"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    walletAddress?: StringNullableFilter<"User"> | string | null
    emailAddress?: StringNullableFilter<"User"> | string | null
    favorites?: UserFavoritePropertyListRelationFilter
    portfolioEntries?: UserPortfolioPropertyListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrderInput | SortOrder
    emailAddress?: SortOrderInput | SortOrder
    favorites?: UserFavoritePropertyOrderByRelationAggregateInput
    portfolioEntries?: UserPortfolioPropertyOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    walletAddress?: string
    emailAddress?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    favorites?: UserFavoritePropertyListRelationFilter
    portfolioEntries?: UserPortfolioPropertyListRelationFilter
  }, "id" | "walletAddress" | "emailAddress">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrderInput | SortOrder
    emailAddress?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    walletAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type UserFavoritePropertyWhereInput = {
    AND?: UserFavoritePropertyWhereInput | UserFavoritePropertyWhereInput[]
    OR?: UserFavoritePropertyWhereInput[]
    NOT?: UserFavoritePropertyWhereInput | UserFavoritePropertyWhereInput[]
    userId?: IntFilter<"UserFavoriteProperty"> | number
    propertyId?: IntFilter<"UserFavoriteProperty"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    property?: XOR<PropertyScalarRelationFilter, PropertyWhereInput>
  }

  export type UserFavoritePropertyOrderByWithRelationInput = {
    userId?: SortOrder
    propertyId?: SortOrder
    user?: UserOrderByWithRelationInput
    property?: PropertyOrderByWithRelationInput
  }

  export type UserFavoritePropertyWhereUniqueInput = Prisma.AtLeast<{
    userId_propertyId?: UserFavoritePropertyUserIdPropertyIdCompoundUniqueInput
    AND?: UserFavoritePropertyWhereInput | UserFavoritePropertyWhereInput[]
    OR?: UserFavoritePropertyWhereInput[]
    NOT?: UserFavoritePropertyWhereInput | UserFavoritePropertyWhereInput[]
    userId?: IntFilter<"UserFavoriteProperty"> | number
    propertyId?: IntFilter<"UserFavoriteProperty"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    property?: XOR<PropertyScalarRelationFilter, PropertyWhereInput>
  }, "userId_propertyId">

  export type UserFavoritePropertyOrderByWithAggregationInput = {
    userId?: SortOrder
    propertyId?: SortOrder
    _count?: UserFavoritePropertyCountOrderByAggregateInput
    _avg?: UserFavoritePropertyAvgOrderByAggregateInput
    _max?: UserFavoritePropertyMaxOrderByAggregateInput
    _min?: UserFavoritePropertyMinOrderByAggregateInput
    _sum?: UserFavoritePropertySumOrderByAggregateInput
  }

  export type UserFavoritePropertyScalarWhereWithAggregatesInput = {
    AND?: UserFavoritePropertyScalarWhereWithAggregatesInput | UserFavoritePropertyScalarWhereWithAggregatesInput[]
    OR?: UserFavoritePropertyScalarWhereWithAggregatesInput[]
    NOT?: UserFavoritePropertyScalarWhereWithAggregatesInput | UserFavoritePropertyScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"UserFavoriteProperty"> | number
    propertyId?: IntWithAggregatesFilter<"UserFavoriteProperty"> | number
  }

  export type UserPortfolioPropertyWhereInput = {
    AND?: UserPortfolioPropertyWhereInput | UserPortfolioPropertyWhereInput[]
    OR?: UserPortfolioPropertyWhereInput[]
    NOT?: UserPortfolioPropertyWhereInput | UserPortfolioPropertyWhereInput[]
    userId?: IntFilter<"UserPortfolioProperty"> | number
    propertyId?: IntFilter<"UserPortfolioProperty"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    property?: XOR<PropertyScalarRelationFilter, PropertyWhereInput>
  }

  export type UserPortfolioPropertyOrderByWithRelationInput = {
    userId?: SortOrder
    propertyId?: SortOrder
    user?: UserOrderByWithRelationInput
    property?: PropertyOrderByWithRelationInput
  }

  export type UserPortfolioPropertyWhereUniqueInput = Prisma.AtLeast<{
    userId_propertyId?: UserPortfolioPropertyUserIdPropertyIdCompoundUniqueInput
    AND?: UserPortfolioPropertyWhereInput | UserPortfolioPropertyWhereInput[]
    OR?: UserPortfolioPropertyWhereInput[]
    NOT?: UserPortfolioPropertyWhereInput | UserPortfolioPropertyWhereInput[]
    userId?: IntFilter<"UserPortfolioProperty"> | number
    propertyId?: IntFilter<"UserPortfolioProperty"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    property?: XOR<PropertyScalarRelationFilter, PropertyWhereInput>
  }, "userId_propertyId">

  export type UserPortfolioPropertyOrderByWithAggregationInput = {
    userId?: SortOrder
    propertyId?: SortOrder
    _count?: UserPortfolioPropertyCountOrderByAggregateInput
    _avg?: UserPortfolioPropertyAvgOrderByAggregateInput
    _max?: UserPortfolioPropertyMaxOrderByAggregateInput
    _min?: UserPortfolioPropertyMinOrderByAggregateInput
    _sum?: UserPortfolioPropertySumOrderByAggregateInput
  }

  export type UserPortfolioPropertyScalarWhereWithAggregatesInput = {
    AND?: UserPortfolioPropertyScalarWhereWithAggregatesInput | UserPortfolioPropertyScalarWhereWithAggregatesInput[]
    OR?: UserPortfolioPropertyScalarWhereWithAggregatesInput[]
    NOT?: UserPortfolioPropertyScalarWhereWithAggregatesInput | UserPortfolioPropertyScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"UserPortfolioProperty"> | number
    propertyId?: IntWithAggregatesFilter<"UserPortfolioProperty"> | number
  }

  export type PropertyCreateInput = {
    onchainId: number
    onchainAddress?: string | null
    metadataHash: string
    imageUrl: string
    totalTokens: number
    tokensLeft: number
    pricePerTokenWei: string
    annualReturnBp: number
    priceUsdTotal: number
    priceUsdPerToken: number
    monthlyReturnUsd: number
    addressLine1: string
    city: string
    province: string
    postalCode: string
    propertyType: string
    description: string
    bedrooms: number
    bathrooms: number
    areaSqft: number
    areaSqm: number
    floor: string
    floorsTotal: number
    createdAt?: Date | string
    updatedAt?: Date | string
    favorites?: UserFavoritePropertyCreateNestedManyWithoutPropertyInput
    portfolioEntries?: UserPortfolioPropertyCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateInput = {
    id?: number
    onchainId: number
    onchainAddress?: string | null
    metadataHash: string
    imageUrl: string
    totalTokens: number
    tokensLeft: number
    pricePerTokenWei: string
    annualReturnBp: number
    priceUsdTotal: number
    priceUsdPerToken: number
    monthlyReturnUsd: number
    addressLine1: string
    city: string
    province: string
    postalCode: string
    propertyType: string
    description: string
    bedrooms: number
    bathrooms: number
    areaSqft: number
    areaSqm: number
    floor: string
    floorsTotal: number
    createdAt?: Date | string
    updatedAt?: Date | string
    favorites?: UserFavoritePropertyUncheckedCreateNestedManyWithoutPropertyInput
    portfolioEntries?: UserPortfolioPropertyUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUpdateInput = {
    onchainId?: IntFieldUpdateOperationsInput | number
    onchainAddress?: NullableStringFieldUpdateOperationsInput | string | null
    metadataHash?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    totalTokens?: IntFieldUpdateOperationsInput | number
    tokensLeft?: IntFieldUpdateOperationsInput | number
    pricePerTokenWei?: StringFieldUpdateOperationsInput | string
    annualReturnBp?: IntFieldUpdateOperationsInput | number
    priceUsdTotal?: FloatFieldUpdateOperationsInput | number
    priceUsdPerToken?: FloatFieldUpdateOperationsInput | number
    monthlyReturnUsd?: FloatFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    areaSqft?: FloatFieldUpdateOperationsInput | number
    areaSqm?: FloatFieldUpdateOperationsInput | number
    floor?: StringFieldUpdateOperationsInput | string
    floorsTotal?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favorites?: UserFavoritePropertyUpdateManyWithoutPropertyNestedInput
    portfolioEntries?: UserPortfolioPropertyUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    onchainId?: IntFieldUpdateOperationsInput | number
    onchainAddress?: NullableStringFieldUpdateOperationsInput | string | null
    metadataHash?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    totalTokens?: IntFieldUpdateOperationsInput | number
    tokensLeft?: IntFieldUpdateOperationsInput | number
    pricePerTokenWei?: StringFieldUpdateOperationsInput | string
    annualReturnBp?: IntFieldUpdateOperationsInput | number
    priceUsdTotal?: FloatFieldUpdateOperationsInput | number
    priceUsdPerToken?: FloatFieldUpdateOperationsInput | number
    monthlyReturnUsd?: FloatFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    areaSqft?: FloatFieldUpdateOperationsInput | number
    areaSqm?: FloatFieldUpdateOperationsInput | number
    floor?: StringFieldUpdateOperationsInput | string
    floorsTotal?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favorites?: UserFavoritePropertyUncheckedUpdateManyWithoutPropertyNestedInput
    portfolioEntries?: UserPortfolioPropertyUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyCreateManyInput = {
    id?: number
    onchainId: number
    onchainAddress?: string | null
    metadataHash: string
    imageUrl: string
    totalTokens: number
    tokensLeft: number
    pricePerTokenWei: string
    annualReturnBp: number
    priceUsdTotal: number
    priceUsdPerToken: number
    monthlyReturnUsd: number
    addressLine1: string
    city: string
    province: string
    postalCode: string
    propertyType: string
    description: string
    bedrooms: number
    bathrooms: number
    areaSqft: number
    areaSqm: number
    floor: string
    floorsTotal: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PropertyUpdateManyMutationInput = {
    onchainId?: IntFieldUpdateOperationsInput | number
    onchainAddress?: NullableStringFieldUpdateOperationsInput | string | null
    metadataHash?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    totalTokens?: IntFieldUpdateOperationsInput | number
    tokensLeft?: IntFieldUpdateOperationsInput | number
    pricePerTokenWei?: StringFieldUpdateOperationsInput | string
    annualReturnBp?: IntFieldUpdateOperationsInput | number
    priceUsdTotal?: FloatFieldUpdateOperationsInput | number
    priceUsdPerToken?: FloatFieldUpdateOperationsInput | number
    monthlyReturnUsd?: FloatFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    areaSqft?: FloatFieldUpdateOperationsInput | number
    areaSqm?: FloatFieldUpdateOperationsInput | number
    floor?: StringFieldUpdateOperationsInput | string
    floorsTotal?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    onchainId?: IntFieldUpdateOperationsInput | number
    onchainAddress?: NullableStringFieldUpdateOperationsInput | string | null
    metadataHash?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    totalTokens?: IntFieldUpdateOperationsInput | number
    tokensLeft?: IntFieldUpdateOperationsInput | number
    pricePerTokenWei?: StringFieldUpdateOperationsInput | string
    annualReturnBp?: IntFieldUpdateOperationsInput | number
    priceUsdTotal?: FloatFieldUpdateOperationsInput | number
    priceUsdPerToken?: FloatFieldUpdateOperationsInput | number
    monthlyReturnUsd?: FloatFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    areaSqft?: FloatFieldUpdateOperationsInput | number
    areaSqm?: FloatFieldUpdateOperationsInput | number
    floor?: StringFieldUpdateOperationsInput | string
    floorsTotal?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    walletAddress?: string | null
    emailAddress?: string | null
    favorites?: UserFavoritePropertyCreateNestedManyWithoutUserInput
    portfolioEntries?: UserPortfolioPropertyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    walletAddress?: string | null
    emailAddress?: string | null
    favorites?: UserFavoritePropertyUncheckedCreateNestedManyWithoutUserInput
    portfolioEntries?: UserPortfolioPropertyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    favorites?: UserFavoritePropertyUpdateManyWithoutUserNestedInput
    portfolioEntries?: UserPortfolioPropertyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    favorites?: UserFavoritePropertyUncheckedUpdateManyWithoutUserNestedInput
    portfolioEntries?: UserPortfolioPropertyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    walletAddress?: string | null
    emailAddress?: string | null
  }

  export type UserUpdateManyMutationInput = {
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserFavoritePropertyCreateInput = {
    user: UserCreateNestedOneWithoutFavoritesInput
    property: PropertyCreateNestedOneWithoutFavoritesInput
  }

  export type UserFavoritePropertyUncheckedCreateInput = {
    userId: number
    propertyId: number
  }

  export type UserFavoritePropertyUpdateInput = {
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
    property?: PropertyUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type UserFavoritePropertyUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoritePropertyCreateManyInput = {
    userId: number
    propertyId: number
  }

  export type UserFavoritePropertyUpdateManyMutationInput = {

  }

  export type UserFavoritePropertyUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type UserPortfolioPropertyCreateInput = {
    user: UserCreateNestedOneWithoutPortfolioEntriesInput
    property: PropertyCreateNestedOneWithoutPortfolioEntriesInput
  }

  export type UserPortfolioPropertyUncheckedCreateInput = {
    userId: number
    propertyId: number
  }

  export type UserPortfolioPropertyUpdateInput = {
    user?: UserUpdateOneRequiredWithoutPortfolioEntriesNestedInput
    property?: PropertyUpdateOneRequiredWithoutPortfolioEntriesNestedInput
  }

  export type UserPortfolioPropertyUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type UserPortfolioPropertyCreateManyInput = {
    userId: number
    propertyId: number
  }

  export type UserPortfolioPropertyUpdateManyMutationInput = {

  }

  export type UserPortfolioPropertyUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserFavoritePropertyListRelationFilter = {
    every?: UserFavoritePropertyWhereInput
    some?: UserFavoritePropertyWhereInput
    none?: UserFavoritePropertyWhereInput
  }

  export type UserPortfolioPropertyListRelationFilter = {
    every?: UserPortfolioPropertyWhereInput
    some?: UserPortfolioPropertyWhereInput
    none?: UserPortfolioPropertyWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserFavoritePropertyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPortfolioPropertyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PropertyCountOrderByAggregateInput = {
    id?: SortOrder
    onchainId?: SortOrder
    onchainAddress?: SortOrder
    metadataHash?: SortOrder
    imageUrl?: SortOrder
    totalTokens?: SortOrder
    tokensLeft?: SortOrder
    pricePerTokenWei?: SortOrder
    annualReturnBp?: SortOrder
    priceUsdTotal?: SortOrder
    priceUsdPerToken?: SortOrder
    monthlyReturnUsd?: SortOrder
    addressLine1?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    propertyType?: SortOrder
    description?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    areaSqft?: SortOrder
    areaSqm?: SortOrder
    floor?: SortOrder
    floorsTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertyAvgOrderByAggregateInput = {
    id?: SortOrder
    onchainId?: SortOrder
    totalTokens?: SortOrder
    tokensLeft?: SortOrder
    annualReturnBp?: SortOrder
    priceUsdTotal?: SortOrder
    priceUsdPerToken?: SortOrder
    monthlyReturnUsd?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    areaSqft?: SortOrder
    areaSqm?: SortOrder
    floorsTotal?: SortOrder
  }

  export type PropertyMaxOrderByAggregateInput = {
    id?: SortOrder
    onchainId?: SortOrder
    onchainAddress?: SortOrder
    metadataHash?: SortOrder
    imageUrl?: SortOrder
    totalTokens?: SortOrder
    tokensLeft?: SortOrder
    pricePerTokenWei?: SortOrder
    annualReturnBp?: SortOrder
    priceUsdTotal?: SortOrder
    priceUsdPerToken?: SortOrder
    monthlyReturnUsd?: SortOrder
    addressLine1?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    propertyType?: SortOrder
    description?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    areaSqft?: SortOrder
    areaSqm?: SortOrder
    floor?: SortOrder
    floorsTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertyMinOrderByAggregateInput = {
    id?: SortOrder
    onchainId?: SortOrder
    onchainAddress?: SortOrder
    metadataHash?: SortOrder
    imageUrl?: SortOrder
    totalTokens?: SortOrder
    tokensLeft?: SortOrder
    pricePerTokenWei?: SortOrder
    annualReturnBp?: SortOrder
    priceUsdTotal?: SortOrder
    priceUsdPerToken?: SortOrder
    monthlyReturnUsd?: SortOrder
    addressLine1?: SortOrder
    city?: SortOrder
    province?: SortOrder
    postalCode?: SortOrder
    propertyType?: SortOrder
    description?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    areaSqft?: SortOrder
    areaSqm?: SortOrder
    floor?: SortOrder
    floorsTotal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PropertySumOrderByAggregateInput = {
    id?: SortOrder
    onchainId?: SortOrder
    totalTokens?: SortOrder
    tokensLeft?: SortOrder
    annualReturnBp?: SortOrder
    priceUsdTotal?: SortOrder
    priceUsdPerToken?: SortOrder
    monthlyReturnUsd?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    areaSqft?: SortOrder
    areaSqm?: SortOrder
    floorsTotal?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    emailAddress?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    emailAddress?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    emailAddress?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PropertyScalarRelationFilter = {
    is?: PropertyWhereInput
    isNot?: PropertyWhereInput
  }

  export type UserFavoritePropertyUserIdPropertyIdCompoundUniqueInput = {
    userId: number
    propertyId: number
  }

  export type UserFavoritePropertyCountOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserFavoritePropertyAvgOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserFavoritePropertyMaxOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserFavoritePropertyMinOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserFavoritePropertySumOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserPortfolioPropertyUserIdPropertyIdCompoundUniqueInput = {
    userId: number
    propertyId: number
  }

  export type UserPortfolioPropertyCountOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserPortfolioPropertyAvgOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserPortfolioPropertyMaxOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserPortfolioPropertyMinOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserPortfolioPropertySumOrderByAggregateInput = {
    userId?: SortOrder
    propertyId?: SortOrder
  }

  export type UserFavoritePropertyCreateNestedManyWithoutPropertyInput = {
    create?: XOR<UserFavoritePropertyCreateWithoutPropertyInput, UserFavoritePropertyUncheckedCreateWithoutPropertyInput> | UserFavoritePropertyCreateWithoutPropertyInput[] | UserFavoritePropertyUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: UserFavoritePropertyCreateOrConnectWithoutPropertyInput | UserFavoritePropertyCreateOrConnectWithoutPropertyInput[]
    createMany?: UserFavoritePropertyCreateManyPropertyInputEnvelope
    connect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
  }

  export type UserPortfolioPropertyCreateNestedManyWithoutPropertyInput = {
    create?: XOR<UserPortfolioPropertyCreateWithoutPropertyInput, UserPortfolioPropertyUncheckedCreateWithoutPropertyInput> | UserPortfolioPropertyCreateWithoutPropertyInput[] | UserPortfolioPropertyUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: UserPortfolioPropertyCreateOrConnectWithoutPropertyInput | UserPortfolioPropertyCreateOrConnectWithoutPropertyInput[]
    createMany?: UserPortfolioPropertyCreateManyPropertyInputEnvelope
    connect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
  }

  export type UserFavoritePropertyUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<UserFavoritePropertyCreateWithoutPropertyInput, UserFavoritePropertyUncheckedCreateWithoutPropertyInput> | UserFavoritePropertyCreateWithoutPropertyInput[] | UserFavoritePropertyUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: UserFavoritePropertyCreateOrConnectWithoutPropertyInput | UserFavoritePropertyCreateOrConnectWithoutPropertyInput[]
    createMany?: UserFavoritePropertyCreateManyPropertyInputEnvelope
    connect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
  }

  export type UserPortfolioPropertyUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<UserPortfolioPropertyCreateWithoutPropertyInput, UserPortfolioPropertyUncheckedCreateWithoutPropertyInput> | UserPortfolioPropertyCreateWithoutPropertyInput[] | UserPortfolioPropertyUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: UserPortfolioPropertyCreateOrConnectWithoutPropertyInput | UserPortfolioPropertyCreateOrConnectWithoutPropertyInput[]
    createMany?: UserPortfolioPropertyCreateManyPropertyInputEnvelope
    connect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserFavoritePropertyUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<UserFavoritePropertyCreateWithoutPropertyInput, UserFavoritePropertyUncheckedCreateWithoutPropertyInput> | UserFavoritePropertyCreateWithoutPropertyInput[] | UserFavoritePropertyUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: UserFavoritePropertyCreateOrConnectWithoutPropertyInput | UserFavoritePropertyCreateOrConnectWithoutPropertyInput[]
    upsert?: UserFavoritePropertyUpsertWithWhereUniqueWithoutPropertyInput | UserFavoritePropertyUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: UserFavoritePropertyCreateManyPropertyInputEnvelope
    set?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    disconnect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    delete?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    connect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    update?: UserFavoritePropertyUpdateWithWhereUniqueWithoutPropertyInput | UserFavoritePropertyUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: UserFavoritePropertyUpdateManyWithWhereWithoutPropertyInput | UserFavoritePropertyUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: UserFavoritePropertyScalarWhereInput | UserFavoritePropertyScalarWhereInput[]
  }

  export type UserPortfolioPropertyUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<UserPortfolioPropertyCreateWithoutPropertyInput, UserPortfolioPropertyUncheckedCreateWithoutPropertyInput> | UserPortfolioPropertyCreateWithoutPropertyInput[] | UserPortfolioPropertyUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: UserPortfolioPropertyCreateOrConnectWithoutPropertyInput | UserPortfolioPropertyCreateOrConnectWithoutPropertyInput[]
    upsert?: UserPortfolioPropertyUpsertWithWhereUniqueWithoutPropertyInput | UserPortfolioPropertyUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: UserPortfolioPropertyCreateManyPropertyInputEnvelope
    set?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    disconnect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    delete?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    connect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    update?: UserPortfolioPropertyUpdateWithWhereUniqueWithoutPropertyInput | UserPortfolioPropertyUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: UserPortfolioPropertyUpdateManyWithWhereWithoutPropertyInput | UserPortfolioPropertyUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: UserPortfolioPropertyScalarWhereInput | UserPortfolioPropertyScalarWhereInput[]
  }

  export type UserFavoritePropertyUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<UserFavoritePropertyCreateWithoutPropertyInput, UserFavoritePropertyUncheckedCreateWithoutPropertyInput> | UserFavoritePropertyCreateWithoutPropertyInput[] | UserFavoritePropertyUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: UserFavoritePropertyCreateOrConnectWithoutPropertyInput | UserFavoritePropertyCreateOrConnectWithoutPropertyInput[]
    upsert?: UserFavoritePropertyUpsertWithWhereUniqueWithoutPropertyInput | UserFavoritePropertyUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: UserFavoritePropertyCreateManyPropertyInputEnvelope
    set?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    disconnect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    delete?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    connect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    update?: UserFavoritePropertyUpdateWithWhereUniqueWithoutPropertyInput | UserFavoritePropertyUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: UserFavoritePropertyUpdateManyWithWhereWithoutPropertyInput | UserFavoritePropertyUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: UserFavoritePropertyScalarWhereInput | UserFavoritePropertyScalarWhereInput[]
  }

  export type UserPortfolioPropertyUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<UserPortfolioPropertyCreateWithoutPropertyInput, UserPortfolioPropertyUncheckedCreateWithoutPropertyInput> | UserPortfolioPropertyCreateWithoutPropertyInput[] | UserPortfolioPropertyUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: UserPortfolioPropertyCreateOrConnectWithoutPropertyInput | UserPortfolioPropertyCreateOrConnectWithoutPropertyInput[]
    upsert?: UserPortfolioPropertyUpsertWithWhereUniqueWithoutPropertyInput | UserPortfolioPropertyUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: UserPortfolioPropertyCreateManyPropertyInputEnvelope
    set?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    disconnect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    delete?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    connect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    update?: UserPortfolioPropertyUpdateWithWhereUniqueWithoutPropertyInput | UserPortfolioPropertyUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: UserPortfolioPropertyUpdateManyWithWhereWithoutPropertyInput | UserPortfolioPropertyUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: UserPortfolioPropertyScalarWhereInput | UserPortfolioPropertyScalarWhereInput[]
  }

  export type UserFavoritePropertyCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFavoritePropertyCreateWithoutUserInput, UserFavoritePropertyUncheckedCreateWithoutUserInput> | UserFavoritePropertyCreateWithoutUserInput[] | UserFavoritePropertyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFavoritePropertyCreateOrConnectWithoutUserInput | UserFavoritePropertyCreateOrConnectWithoutUserInput[]
    createMany?: UserFavoritePropertyCreateManyUserInputEnvelope
    connect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
  }

  export type UserPortfolioPropertyCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPortfolioPropertyCreateWithoutUserInput, UserPortfolioPropertyUncheckedCreateWithoutUserInput> | UserPortfolioPropertyCreateWithoutUserInput[] | UserPortfolioPropertyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPortfolioPropertyCreateOrConnectWithoutUserInput | UserPortfolioPropertyCreateOrConnectWithoutUserInput[]
    createMany?: UserPortfolioPropertyCreateManyUserInputEnvelope
    connect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
  }

  export type UserFavoritePropertyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFavoritePropertyCreateWithoutUserInput, UserFavoritePropertyUncheckedCreateWithoutUserInput> | UserFavoritePropertyCreateWithoutUserInput[] | UserFavoritePropertyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFavoritePropertyCreateOrConnectWithoutUserInput | UserFavoritePropertyCreateOrConnectWithoutUserInput[]
    createMany?: UserFavoritePropertyCreateManyUserInputEnvelope
    connect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
  }

  export type UserPortfolioPropertyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPortfolioPropertyCreateWithoutUserInput, UserPortfolioPropertyUncheckedCreateWithoutUserInput> | UserPortfolioPropertyCreateWithoutUserInput[] | UserPortfolioPropertyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPortfolioPropertyCreateOrConnectWithoutUserInput | UserPortfolioPropertyCreateOrConnectWithoutUserInput[]
    createMany?: UserPortfolioPropertyCreateManyUserInputEnvelope
    connect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
  }

  export type UserFavoritePropertyUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFavoritePropertyCreateWithoutUserInput, UserFavoritePropertyUncheckedCreateWithoutUserInput> | UserFavoritePropertyCreateWithoutUserInput[] | UserFavoritePropertyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFavoritePropertyCreateOrConnectWithoutUserInput | UserFavoritePropertyCreateOrConnectWithoutUserInput[]
    upsert?: UserFavoritePropertyUpsertWithWhereUniqueWithoutUserInput | UserFavoritePropertyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFavoritePropertyCreateManyUserInputEnvelope
    set?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    disconnect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    delete?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    connect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    update?: UserFavoritePropertyUpdateWithWhereUniqueWithoutUserInput | UserFavoritePropertyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFavoritePropertyUpdateManyWithWhereWithoutUserInput | UserFavoritePropertyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFavoritePropertyScalarWhereInput | UserFavoritePropertyScalarWhereInput[]
  }

  export type UserPortfolioPropertyUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPortfolioPropertyCreateWithoutUserInput, UserPortfolioPropertyUncheckedCreateWithoutUserInput> | UserPortfolioPropertyCreateWithoutUserInput[] | UserPortfolioPropertyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPortfolioPropertyCreateOrConnectWithoutUserInput | UserPortfolioPropertyCreateOrConnectWithoutUserInput[]
    upsert?: UserPortfolioPropertyUpsertWithWhereUniqueWithoutUserInput | UserPortfolioPropertyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPortfolioPropertyCreateManyUserInputEnvelope
    set?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    disconnect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    delete?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    connect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    update?: UserPortfolioPropertyUpdateWithWhereUniqueWithoutUserInput | UserPortfolioPropertyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPortfolioPropertyUpdateManyWithWhereWithoutUserInput | UserPortfolioPropertyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPortfolioPropertyScalarWhereInput | UserPortfolioPropertyScalarWhereInput[]
  }

  export type UserFavoritePropertyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFavoritePropertyCreateWithoutUserInput, UserFavoritePropertyUncheckedCreateWithoutUserInput> | UserFavoritePropertyCreateWithoutUserInput[] | UserFavoritePropertyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFavoritePropertyCreateOrConnectWithoutUserInput | UserFavoritePropertyCreateOrConnectWithoutUserInput[]
    upsert?: UserFavoritePropertyUpsertWithWhereUniqueWithoutUserInput | UserFavoritePropertyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFavoritePropertyCreateManyUserInputEnvelope
    set?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    disconnect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    delete?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    connect?: UserFavoritePropertyWhereUniqueInput | UserFavoritePropertyWhereUniqueInput[]
    update?: UserFavoritePropertyUpdateWithWhereUniqueWithoutUserInput | UserFavoritePropertyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFavoritePropertyUpdateManyWithWhereWithoutUserInput | UserFavoritePropertyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFavoritePropertyScalarWhereInput | UserFavoritePropertyScalarWhereInput[]
  }

  export type UserPortfolioPropertyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPortfolioPropertyCreateWithoutUserInput, UserPortfolioPropertyUncheckedCreateWithoutUserInput> | UserPortfolioPropertyCreateWithoutUserInput[] | UserPortfolioPropertyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPortfolioPropertyCreateOrConnectWithoutUserInput | UserPortfolioPropertyCreateOrConnectWithoutUserInput[]
    upsert?: UserPortfolioPropertyUpsertWithWhereUniqueWithoutUserInput | UserPortfolioPropertyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPortfolioPropertyCreateManyUserInputEnvelope
    set?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    disconnect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    delete?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    connect?: UserPortfolioPropertyWhereUniqueInput | UserPortfolioPropertyWhereUniqueInput[]
    update?: UserPortfolioPropertyUpdateWithWhereUniqueWithoutUserInput | UserPortfolioPropertyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPortfolioPropertyUpdateManyWithWhereWithoutUserInput | UserPortfolioPropertyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPortfolioPropertyScalarWhereInput | UserPortfolioPropertyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    connect?: UserWhereUniqueInput
  }

  export type PropertyCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<PropertyCreateWithoutFavoritesInput, PropertyUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutFavoritesInput
    connect?: PropertyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    upsert?: UserUpsertWithoutFavoritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoritesInput, UserUpdateWithoutFavoritesInput>, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type PropertyUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<PropertyCreateWithoutFavoritesInput, PropertyUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutFavoritesInput
    upsert?: PropertyUpsertWithoutFavoritesInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutFavoritesInput, PropertyUpdateWithoutFavoritesInput>, PropertyUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserCreateNestedOneWithoutPortfolioEntriesInput = {
    create?: XOR<UserCreateWithoutPortfolioEntriesInput, UserUncheckedCreateWithoutPortfolioEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPortfolioEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type PropertyCreateNestedOneWithoutPortfolioEntriesInput = {
    create?: XOR<PropertyCreateWithoutPortfolioEntriesInput, PropertyUncheckedCreateWithoutPortfolioEntriesInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutPortfolioEntriesInput
    connect?: PropertyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPortfolioEntriesNestedInput = {
    create?: XOR<UserCreateWithoutPortfolioEntriesInput, UserUncheckedCreateWithoutPortfolioEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPortfolioEntriesInput
    upsert?: UserUpsertWithoutPortfolioEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPortfolioEntriesInput, UserUpdateWithoutPortfolioEntriesInput>, UserUncheckedUpdateWithoutPortfolioEntriesInput>
  }

  export type PropertyUpdateOneRequiredWithoutPortfolioEntriesNestedInput = {
    create?: XOR<PropertyCreateWithoutPortfolioEntriesInput, PropertyUncheckedCreateWithoutPortfolioEntriesInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutPortfolioEntriesInput
    upsert?: PropertyUpsertWithoutPortfolioEntriesInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutPortfolioEntriesInput, PropertyUpdateWithoutPortfolioEntriesInput>, PropertyUncheckedUpdateWithoutPortfolioEntriesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserFavoritePropertyCreateWithoutPropertyInput = {
    user: UserCreateNestedOneWithoutFavoritesInput
  }

  export type UserFavoritePropertyUncheckedCreateWithoutPropertyInput = {
    userId: number
  }

  export type UserFavoritePropertyCreateOrConnectWithoutPropertyInput = {
    where: UserFavoritePropertyWhereUniqueInput
    create: XOR<UserFavoritePropertyCreateWithoutPropertyInput, UserFavoritePropertyUncheckedCreateWithoutPropertyInput>
  }

  export type UserFavoritePropertyCreateManyPropertyInputEnvelope = {
    data: UserFavoritePropertyCreateManyPropertyInput | UserFavoritePropertyCreateManyPropertyInput[]
  }

  export type UserPortfolioPropertyCreateWithoutPropertyInput = {
    user: UserCreateNestedOneWithoutPortfolioEntriesInput
  }

  export type UserPortfolioPropertyUncheckedCreateWithoutPropertyInput = {
    userId: number
  }

  export type UserPortfolioPropertyCreateOrConnectWithoutPropertyInput = {
    where: UserPortfolioPropertyWhereUniqueInput
    create: XOR<UserPortfolioPropertyCreateWithoutPropertyInput, UserPortfolioPropertyUncheckedCreateWithoutPropertyInput>
  }

  export type UserPortfolioPropertyCreateManyPropertyInputEnvelope = {
    data: UserPortfolioPropertyCreateManyPropertyInput | UserPortfolioPropertyCreateManyPropertyInput[]
  }

  export type UserFavoritePropertyUpsertWithWhereUniqueWithoutPropertyInput = {
    where: UserFavoritePropertyWhereUniqueInput
    update: XOR<UserFavoritePropertyUpdateWithoutPropertyInput, UserFavoritePropertyUncheckedUpdateWithoutPropertyInput>
    create: XOR<UserFavoritePropertyCreateWithoutPropertyInput, UserFavoritePropertyUncheckedCreateWithoutPropertyInput>
  }

  export type UserFavoritePropertyUpdateWithWhereUniqueWithoutPropertyInput = {
    where: UserFavoritePropertyWhereUniqueInput
    data: XOR<UserFavoritePropertyUpdateWithoutPropertyInput, UserFavoritePropertyUncheckedUpdateWithoutPropertyInput>
  }

  export type UserFavoritePropertyUpdateManyWithWhereWithoutPropertyInput = {
    where: UserFavoritePropertyScalarWhereInput
    data: XOR<UserFavoritePropertyUpdateManyMutationInput, UserFavoritePropertyUncheckedUpdateManyWithoutPropertyInput>
  }

  export type UserFavoritePropertyScalarWhereInput = {
    AND?: UserFavoritePropertyScalarWhereInput | UserFavoritePropertyScalarWhereInput[]
    OR?: UserFavoritePropertyScalarWhereInput[]
    NOT?: UserFavoritePropertyScalarWhereInput | UserFavoritePropertyScalarWhereInput[]
    userId?: IntFilter<"UserFavoriteProperty"> | number
    propertyId?: IntFilter<"UserFavoriteProperty"> | number
  }

  export type UserPortfolioPropertyUpsertWithWhereUniqueWithoutPropertyInput = {
    where: UserPortfolioPropertyWhereUniqueInput
    update: XOR<UserPortfolioPropertyUpdateWithoutPropertyInput, UserPortfolioPropertyUncheckedUpdateWithoutPropertyInput>
    create: XOR<UserPortfolioPropertyCreateWithoutPropertyInput, UserPortfolioPropertyUncheckedCreateWithoutPropertyInput>
  }

  export type UserPortfolioPropertyUpdateWithWhereUniqueWithoutPropertyInput = {
    where: UserPortfolioPropertyWhereUniqueInput
    data: XOR<UserPortfolioPropertyUpdateWithoutPropertyInput, UserPortfolioPropertyUncheckedUpdateWithoutPropertyInput>
  }

  export type UserPortfolioPropertyUpdateManyWithWhereWithoutPropertyInput = {
    where: UserPortfolioPropertyScalarWhereInput
    data: XOR<UserPortfolioPropertyUpdateManyMutationInput, UserPortfolioPropertyUncheckedUpdateManyWithoutPropertyInput>
  }

  export type UserPortfolioPropertyScalarWhereInput = {
    AND?: UserPortfolioPropertyScalarWhereInput | UserPortfolioPropertyScalarWhereInput[]
    OR?: UserPortfolioPropertyScalarWhereInput[]
    NOT?: UserPortfolioPropertyScalarWhereInput | UserPortfolioPropertyScalarWhereInput[]
    userId?: IntFilter<"UserPortfolioProperty"> | number
    propertyId?: IntFilter<"UserPortfolioProperty"> | number
  }

  export type UserFavoritePropertyCreateWithoutUserInput = {
    property: PropertyCreateNestedOneWithoutFavoritesInput
  }

  export type UserFavoritePropertyUncheckedCreateWithoutUserInput = {
    propertyId: number
  }

  export type UserFavoritePropertyCreateOrConnectWithoutUserInput = {
    where: UserFavoritePropertyWhereUniqueInput
    create: XOR<UserFavoritePropertyCreateWithoutUserInput, UserFavoritePropertyUncheckedCreateWithoutUserInput>
  }

  export type UserFavoritePropertyCreateManyUserInputEnvelope = {
    data: UserFavoritePropertyCreateManyUserInput | UserFavoritePropertyCreateManyUserInput[]
  }

  export type UserPortfolioPropertyCreateWithoutUserInput = {
    property: PropertyCreateNestedOneWithoutPortfolioEntriesInput
  }

  export type UserPortfolioPropertyUncheckedCreateWithoutUserInput = {
    propertyId: number
  }

  export type UserPortfolioPropertyCreateOrConnectWithoutUserInput = {
    where: UserPortfolioPropertyWhereUniqueInput
    create: XOR<UserPortfolioPropertyCreateWithoutUserInput, UserPortfolioPropertyUncheckedCreateWithoutUserInput>
  }

  export type UserPortfolioPropertyCreateManyUserInputEnvelope = {
    data: UserPortfolioPropertyCreateManyUserInput | UserPortfolioPropertyCreateManyUserInput[]
  }

  export type UserFavoritePropertyUpsertWithWhereUniqueWithoutUserInput = {
    where: UserFavoritePropertyWhereUniqueInput
    update: XOR<UserFavoritePropertyUpdateWithoutUserInput, UserFavoritePropertyUncheckedUpdateWithoutUserInput>
    create: XOR<UserFavoritePropertyCreateWithoutUserInput, UserFavoritePropertyUncheckedCreateWithoutUserInput>
  }

  export type UserFavoritePropertyUpdateWithWhereUniqueWithoutUserInput = {
    where: UserFavoritePropertyWhereUniqueInput
    data: XOR<UserFavoritePropertyUpdateWithoutUserInput, UserFavoritePropertyUncheckedUpdateWithoutUserInput>
  }

  export type UserFavoritePropertyUpdateManyWithWhereWithoutUserInput = {
    where: UserFavoritePropertyScalarWhereInput
    data: XOR<UserFavoritePropertyUpdateManyMutationInput, UserFavoritePropertyUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPortfolioPropertyUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPortfolioPropertyWhereUniqueInput
    update: XOR<UserPortfolioPropertyUpdateWithoutUserInput, UserPortfolioPropertyUncheckedUpdateWithoutUserInput>
    create: XOR<UserPortfolioPropertyCreateWithoutUserInput, UserPortfolioPropertyUncheckedCreateWithoutUserInput>
  }

  export type UserPortfolioPropertyUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPortfolioPropertyWhereUniqueInput
    data: XOR<UserPortfolioPropertyUpdateWithoutUserInput, UserPortfolioPropertyUncheckedUpdateWithoutUserInput>
  }

  export type UserPortfolioPropertyUpdateManyWithWhereWithoutUserInput = {
    where: UserPortfolioPropertyScalarWhereInput
    data: XOR<UserPortfolioPropertyUpdateManyMutationInput, UserPortfolioPropertyUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCreateWithoutFavoritesInput = {
    walletAddress?: string | null
    emailAddress?: string | null
    portfolioEntries?: UserPortfolioPropertyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoritesInput = {
    id?: number
    walletAddress?: string | null
    emailAddress?: string | null
    portfolioEntries?: UserPortfolioPropertyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
  }

  export type PropertyCreateWithoutFavoritesInput = {
    onchainId: number
    onchainAddress?: string | null
    metadataHash: string
    imageUrl: string
    totalTokens: number
    tokensLeft: number
    pricePerTokenWei: string
    annualReturnBp: number
    priceUsdTotal: number
    priceUsdPerToken: number
    monthlyReturnUsd: number
    addressLine1: string
    city: string
    province: string
    postalCode: string
    propertyType: string
    description: string
    bedrooms: number
    bathrooms: number
    areaSqft: number
    areaSqm: number
    floor: string
    floorsTotal: number
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolioEntries?: UserPortfolioPropertyCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutFavoritesInput = {
    id?: number
    onchainId: number
    onchainAddress?: string | null
    metadataHash: string
    imageUrl: string
    totalTokens: number
    tokensLeft: number
    pricePerTokenWei: string
    annualReturnBp: number
    priceUsdTotal: number
    priceUsdPerToken: number
    monthlyReturnUsd: number
    addressLine1: string
    city: string
    province: string
    postalCode: string
    propertyType: string
    description: string
    bedrooms: number
    bathrooms: number
    areaSqft: number
    areaSqm: number
    floor: string
    floorsTotal: number
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolioEntries?: UserPortfolioPropertyUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutFavoritesInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutFavoritesInput, PropertyUncheckedCreateWithoutFavoritesInput>
  }

  export type UserUpsertWithoutFavoritesInput = {
    update: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserUpdateWithoutFavoritesInput = {
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioEntries?: UserPortfolioPropertyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioEntries?: UserPortfolioPropertyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PropertyUpsertWithoutFavoritesInput = {
    update: XOR<PropertyUpdateWithoutFavoritesInput, PropertyUncheckedUpdateWithoutFavoritesInput>
    create: XOR<PropertyCreateWithoutFavoritesInput, PropertyUncheckedCreateWithoutFavoritesInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutFavoritesInput, PropertyUncheckedUpdateWithoutFavoritesInput>
  }

  export type PropertyUpdateWithoutFavoritesInput = {
    onchainId?: IntFieldUpdateOperationsInput | number
    onchainAddress?: NullableStringFieldUpdateOperationsInput | string | null
    metadataHash?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    totalTokens?: IntFieldUpdateOperationsInput | number
    tokensLeft?: IntFieldUpdateOperationsInput | number
    pricePerTokenWei?: StringFieldUpdateOperationsInput | string
    annualReturnBp?: IntFieldUpdateOperationsInput | number
    priceUsdTotal?: FloatFieldUpdateOperationsInput | number
    priceUsdPerToken?: FloatFieldUpdateOperationsInput | number
    monthlyReturnUsd?: FloatFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    areaSqft?: FloatFieldUpdateOperationsInput | number
    areaSqm?: FloatFieldUpdateOperationsInput | number
    floor?: StringFieldUpdateOperationsInput | string
    floorsTotal?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolioEntries?: UserPortfolioPropertyUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutFavoritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    onchainId?: IntFieldUpdateOperationsInput | number
    onchainAddress?: NullableStringFieldUpdateOperationsInput | string | null
    metadataHash?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    totalTokens?: IntFieldUpdateOperationsInput | number
    tokensLeft?: IntFieldUpdateOperationsInput | number
    pricePerTokenWei?: StringFieldUpdateOperationsInput | string
    annualReturnBp?: IntFieldUpdateOperationsInput | number
    priceUsdTotal?: FloatFieldUpdateOperationsInput | number
    priceUsdPerToken?: FloatFieldUpdateOperationsInput | number
    monthlyReturnUsd?: FloatFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    areaSqft?: FloatFieldUpdateOperationsInput | number
    areaSqm?: FloatFieldUpdateOperationsInput | number
    floor?: StringFieldUpdateOperationsInput | string
    floorsTotal?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolioEntries?: UserPortfolioPropertyUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type UserCreateWithoutPortfolioEntriesInput = {
    walletAddress?: string | null
    emailAddress?: string | null
    favorites?: UserFavoritePropertyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPortfolioEntriesInput = {
    id?: number
    walletAddress?: string | null
    emailAddress?: string | null
    favorites?: UserFavoritePropertyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPortfolioEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPortfolioEntriesInput, UserUncheckedCreateWithoutPortfolioEntriesInput>
  }

  export type PropertyCreateWithoutPortfolioEntriesInput = {
    onchainId: number
    onchainAddress?: string | null
    metadataHash: string
    imageUrl: string
    totalTokens: number
    tokensLeft: number
    pricePerTokenWei: string
    annualReturnBp: number
    priceUsdTotal: number
    priceUsdPerToken: number
    monthlyReturnUsd: number
    addressLine1: string
    city: string
    province: string
    postalCode: string
    propertyType: string
    description: string
    bedrooms: number
    bathrooms: number
    areaSqft: number
    areaSqm: number
    floor: string
    floorsTotal: number
    createdAt?: Date | string
    updatedAt?: Date | string
    favorites?: UserFavoritePropertyCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutPortfolioEntriesInput = {
    id?: number
    onchainId: number
    onchainAddress?: string | null
    metadataHash: string
    imageUrl: string
    totalTokens: number
    tokensLeft: number
    pricePerTokenWei: string
    annualReturnBp: number
    priceUsdTotal: number
    priceUsdPerToken: number
    monthlyReturnUsd: number
    addressLine1: string
    city: string
    province: string
    postalCode: string
    propertyType: string
    description: string
    bedrooms: number
    bathrooms: number
    areaSqft: number
    areaSqm: number
    floor: string
    floorsTotal: number
    createdAt?: Date | string
    updatedAt?: Date | string
    favorites?: UserFavoritePropertyUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutPortfolioEntriesInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutPortfolioEntriesInput, PropertyUncheckedCreateWithoutPortfolioEntriesInput>
  }

  export type UserUpsertWithoutPortfolioEntriesInput = {
    update: XOR<UserUpdateWithoutPortfolioEntriesInput, UserUncheckedUpdateWithoutPortfolioEntriesInput>
    create: XOR<UserCreateWithoutPortfolioEntriesInput, UserUncheckedCreateWithoutPortfolioEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPortfolioEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPortfolioEntriesInput, UserUncheckedUpdateWithoutPortfolioEntriesInput>
  }

  export type UserUpdateWithoutPortfolioEntriesInput = {
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    favorites?: UserFavoritePropertyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPortfolioEntriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    favorites?: UserFavoritePropertyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PropertyUpsertWithoutPortfolioEntriesInput = {
    update: XOR<PropertyUpdateWithoutPortfolioEntriesInput, PropertyUncheckedUpdateWithoutPortfolioEntriesInput>
    create: XOR<PropertyCreateWithoutPortfolioEntriesInput, PropertyUncheckedCreateWithoutPortfolioEntriesInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutPortfolioEntriesInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutPortfolioEntriesInput, PropertyUncheckedUpdateWithoutPortfolioEntriesInput>
  }

  export type PropertyUpdateWithoutPortfolioEntriesInput = {
    onchainId?: IntFieldUpdateOperationsInput | number
    onchainAddress?: NullableStringFieldUpdateOperationsInput | string | null
    metadataHash?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    totalTokens?: IntFieldUpdateOperationsInput | number
    tokensLeft?: IntFieldUpdateOperationsInput | number
    pricePerTokenWei?: StringFieldUpdateOperationsInput | string
    annualReturnBp?: IntFieldUpdateOperationsInput | number
    priceUsdTotal?: FloatFieldUpdateOperationsInput | number
    priceUsdPerToken?: FloatFieldUpdateOperationsInput | number
    monthlyReturnUsd?: FloatFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    areaSqft?: FloatFieldUpdateOperationsInput | number
    areaSqm?: FloatFieldUpdateOperationsInput | number
    floor?: StringFieldUpdateOperationsInput | string
    floorsTotal?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favorites?: UserFavoritePropertyUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutPortfolioEntriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    onchainId?: IntFieldUpdateOperationsInput | number
    onchainAddress?: NullableStringFieldUpdateOperationsInput | string | null
    metadataHash?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    totalTokens?: IntFieldUpdateOperationsInput | number
    tokensLeft?: IntFieldUpdateOperationsInput | number
    pricePerTokenWei?: StringFieldUpdateOperationsInput | string
    annualReturnBp?: IntFieldUpdateOperationsInput | number
    priceUsdTotal?: FloatFieldUpdateOperationsInput | number
    priceUsdPerToken?: FloatFieldUpdateOperationsInput | number
    monthlyReturnUsd?: FloatFieldUpdateOperationsInput | number
    addressLine1?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    propertyType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    bedrooms?: IntFieldUpdateOperationsInput | number
    bathrooms?: IntFieldUpdateOperationsInput | number
    areaSqft?: FloatFieldUpdateOperationsInput | number
    areaSqm?: FloatFieldUpdateOperationsInput | number
    floor?: StringFieldUpdateOperationsInput | string
    floorsTotal?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favorites?: UserFavoritePropertyUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type UserFavoritePropertyCreateManyPropertyInput = {
    userId: number
  }

  export type UserPortfolioPropertyCreateManyPropertyInput = {
    userId: number
  }

  export type UserFavoritePropertyUpdateWithoutPropertyInput = {
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type UserFavoritePropertyUncheckedUpdateWithoutPropertyInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoritePropertyUncheckedUpdateManyWithoutPropertyInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserPortfolioPropertyUpdateWithoutPropertyInput = {
    user?: UserUpdateOneRequiredWithoutPortfolioEntriesNestedInput
  }

  export type UserPortfolioPropertyUncheckedUpdateWithoutPropertyInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserPortfolioPropertyUncheckedUpdateManyWithoutPropertyInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoritePropertyCreateManyUserInput = {
    propertyId: number
  }

  export type UserPortfolioPropertyCreateManyUserInput = {
    propertyId: number
  }

  export type UserFavoritePropertyUpdateWithoutUserInput = {
    property?: PropertyUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type UserFavoritePropertyUncheckedUpdateWithoutUserInput = {
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoritePropertyUncheckedUpdateManyWithoutUserInput = {
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type UserPortfolioPropertyUpdateWithoutUserInput = {
    property?: PropertyUpdateOneRequiredWithoutPortfolioEntriesNestedInput
  }

  export type UserPortfolioPropertyUncheckedUpdateWithoutUserInput = {
    propertyId?: IntFieldUpdateOperationsInput | number
  }

  export type UserPortfolioPropertyUncheckedUpdateManyWithoutUserInput = {
    propertyId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}